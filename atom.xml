<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[BUILDING NON-LINEAR ANALYSIS TOOLS FOR C-PAC]]></title>
  <link href="http://erramuzpe.github.io/C-PAC/atom.xml" rel="self"/>
  <link href="http://erramuzpe.github.io/C-PAC/"/>
  <updated>2015-07-22T14:34:24+02:00</updated>
  <id>http://erramuzpe.github.io/C-PAC/</id>
  <author>
    <name><![CDATA[github.com/erramuzpe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Discussion and Planning GUI for NLTSA and Testing Synchrony Measures]]></title>
    <link href="http://erramuzpe.github.io/C-PAC/blog/2015/07/22/discussion-and-planning-gui-for-nltsa-and-testing-synchrony-measures/"/>
    <updated>2015-07-22T12:24:57+02:00</updated>
    <id>http://erramuzpe.github.io/C-PAC/blog/2015/07/22/discussion-and-planning-gui-for-nltsa-and-testing-synchrony-measures</id>
    <content type="html"><![CDATA[<p>We are trying to converge to an easy and clear design of the GUI of our toolbox that integrates in CPAC’s structure and allows users to use it. We are trying here to avoid redundant options in the workflow and it is becoming a quite difficult task, since we want the measures to be separated in differentiated subgroups, but at the same time, give the toolbox the possibility of using common functions (such as the extraction of the timeseries). It has to be non-redundant in this way, the most complicated thing will be the correct use of data structures (to take the ones that are already being generated from other modules in CPAC and to check if the series of a volume had been already extracted, in order to do not duplicate efforts). The design has to be generalizable enough that it can be used in other workflows.</p>

<h2><strong> Planning of the GUI for NLTSA module  </strong></h2>

<p>As the most important part of developing new software, it is always necessary to have a good developing plan. For the purpose of building the GUI for our toolbox, we have divided all our measures in 3 main groups:</p>

<ul>
<li>Pre-Analysis measures: The ones that not correspond directly to NonLinearTimeSeriesAnalysis and can be applied directly into the extracted data. We can find here synchrony measures in time (correlation, partial correlation) and frequency domain (phase synchrony index, phase locking value). Also, treatment of fingerprints and ICA timeseries extraction are due to be added in this submodule.</li>
<li>Information Theory and Causality measures: The ones coming from the informative framework and causality. These measures involve the acquisition of information flow and sharing between variables (Mutual Information, Transfer Entropy, Granger Causality Toolbox measures (MVGC, PWCGC)).</li>
<li>Scale free dynamics measures: This is the box that make use of the most advanced measures (fractality, avalanches, detrended fluctuation analysis, Hurst exponents). These measures are still pending of being developed (planned for August), so we have still not decided about the inputs and the outputs they are generating.</li>
</ul>


<p>The schema shown above has been resumed in the next diagram. Most of the modules make use of other modules functions (we have tried to not being redundant with CPAC’s code). We have ensured that the helper functions developed for our toolbox are available also from outside our module.</p>

<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/GUI_Diagram.png" width="800" height="800" title="image" alt="image"></p>

<h2><strong> Implementation of the GUI </strong></h2>

<p>Following the instructions published in the previous post, there has been straightforward to build up the 3 subgroups, as they are quite similar between each other. The most important feature for us was the possibility of calculating the measures independently (there is no need of calculating all of them, the user can choose whether to apply the different measures without restriction).</p>

<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/CPAC_GUI_1.png" width="800" height="800" title="image" alt="image"></p>

<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/CPAC_GUI_2.png" width="800" height="800" title="image" alt="image"></p>

<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/CPAC_GUI_3.png" width="800" height="800" title="image" alt="image"></p>

<p>A serious work must be done in flow-controlling inside <em>cpac_pipeline.py</em> to avoid repeating the operations present in the submodules (mainly, timeseries generation. Once that are generated, there is no point in extracting them again). Also, it is important to have well connected the toolbox to the main CPAC’s workflow and check whether the data has been previously extracted. Maybe we can talk at some point soon about this and listen to developers thoughts, comments in the post will be very welcomed. Also, we left the door open for interesting modifications that could happen (the 3rd submodule is still pending of being coded and we have in mind to deal with visualization and data presentation). The whole integration will be held in the last week of GSoC with the help of all collaborators and students.</p>

<h2><strong> Synchrony measures in ADHD data </strong></h2>

<p>As we are trying not to evaluate all our measures together at the end, this week we have tried extensively our new dataset from ADHD200 (specific information about the dataset and how we  did our first experiment in <a href="http://erramuzpe.github.io/C-PAC/blog/2015/07/09/testing-different-parcellations-over-ad-patients-data/">previous post</a> ).</p>

<p>We had two measures to test over this data, “phase synchrony index” (which is a self-informative value about the synchrony level of a specific signal) and “phase locking value” (which is the relation between the synchronicity of 2 variables).</p>

<p>We had two measures to test over this data, “phase synchrony index” or PSI (which is a self-informative value about the synchrony level of a specific signal) and “phase locking value” or PLV (which is the relation between the synchronicity of 2 variables).</p>

<h4><strong> Results </strong></h4>

<p>The PSI is a single variable measure, so it is just an self-informative measure. First results showed that the data extracted with the cc400 and cc1000 parcellations had a low synchrony level (some of them looked totally desynchronized). Overall, there was not much to say about differences between ADHD patients and controls.</p>

<p>The PLV, however, showed that the synchrony between some of the signals was strong (>0.7). As these parcellations are randomly created and assigned, consecutive ROIs have not spatial relation and showing the usual matrixes was not going to be informative.</p>

<h2><strong> Solved GC VAR model calculation </strong></h2>

<p>We have changed the paradigm of measuring the residuals for the Granger Causality calculation. Instead of calculating the covariance matrix of the data, which was creating problems later with the VAR model, we have change this. Now, the residuals are calculated directly from the data (the regression model used was OLS using QR decomposition. Specifications in MVGC toolbox docs), without performing the calculation of the covariance matrix.</p>

<p>We performed a small evaluation of the PWGC over our ADHD200 dataset and results were not visually different between groups. We are working in an appropriate way of showing results coming from these measures.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementing Modules in CPAC's GUI]]></title>
    <link href="http://erramuzpe.github.io/C-PAC/blog/2015/07/15/implementing-modules-in-the-gui/"/>
    <updated>2015-07-15T12:24:57+02:00</updated>
    <id>http://erramuzpe.github.io/C-PAC/blog/2015/07/15/implementing-modules-in-the-gui</id>
    <content type="html"><![CDATA[<p>This week I have been trying to work with the migration of our modules to the GUI. For that, you will need to perform three main steps:</p>

<ul>
<li>Create the interface for your modules (2 steps)

<ul>
<li>Define your space in the main configuration window tree. (Name your module/submodules)</li>
<li>Define a window with configuration options (inputs and output of your workflow basically) for each one of your modules/submodules. The main window of the module usually is referred to an html file explaining what this module does and how does it work.</li>
</ul>
</li>
<li>Link the GUI with your workflows (1 step)

<ul>
<li>Link the configuration window of each of the submodules with the corresponding workflow through the pipeline module, allowing the execution of your workflows.</li>
</ul>
</li>
</ul>


<h2><strong> Create the interface for your modules </strong></h2>

<h4><strong> STEP 1 </strong></h4>

<p>The interface for the modules needs to be created. This is done by adding your module structure to the main configuration tree (a bit of planification is needed before deciding how the module structure is going to be organized). The first 2 steps should be done in parallel, I choosed to create the tree structure first, because I thought it was better a up to bottom approach.</p>

<p>First of all, you have to define your space in the <a href="https://github.com/FCP-INDI/C-PAC/blob/master/CPAC/GUI/interface/windows/config_window.py">config_window</a> file, in the Class named &lsquo;Mybook&rsquo;.</p>

<p>There, you can find all the module names that will be listed in the main left of the pipeline configuration window. As an example, I have added some lines at the end of the Class:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'>   <span class="bp">self</span><span class="o">.</span><span class="n">AddPage</span><span class="p">(</span><span class="n">page43</span><span class="p">,</span> <span class="s">&quot;CWAS&quot;</span><span class="p">,</span> <span class="n">wx</span><span class="o">.</span><span class="n">ID_ANY</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">AddSubPage</span><span class="p">(</span><span class="n">page44</span><span class="p">,</span> <span class="s">&quot;CWAS Settings&quot;</span><span class="p">,</span> <span class="n">wx</span><span class="o">.</span><span class="n">ID_ANY</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">AddPage</span><span class="p">(</span><span class="n">page45</span><span class="p">,</span> <span class="s">&quot;Group Analysis&quot;</span><span class="p">,</span> <span class="n">wx</span><span class="o">.</span><span class="n">ID_ANY</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">AddSubPage</span><span class="p">(</span><span class="n">page46</span><span class="p">,</span> <span class="s">&quot;Group Analysis Settings&quot;</span><span class="p">,</span> <span class="n">wx</span><span class="o">.</span><span class="n">ID_ANY</span><span class="p">)</span>
</span><span class='line'>        <span class="c">### ADDED NEXT 3 LINES: 48 is my main module name. 49 and 50 submodules inside 48</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">AddPage</span><span class="p">(</span><span class="n">page48</span><span class="p">,</span> <span class="s">&quot;Non Linear TS Analysis&quot;</span><span class="p">,</span> <span class="n">wx</span><span class="o">.</span><span class="n">ID_ANY</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">AddSubPage</span><span class="p">(</span><span class="n">page49</span><span class="p">,</span> <span class="s">&quot;Information Theory&quot;</span><span class="p">,</span> <span class="n">wx</span><span class="o">.</span><span class="n">ID_ANY</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">AddSubPage</span><span class="p">(</span><span class="n">page50</span><span class="p">,</span> <span class="s">&quot;Causality&quot;</span><span class="p">,</span> <span class="n">wx</span><span class="o">.</span><span class="n">ID_ANY</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is also important to add the name of your GUI Classes in the import at the beginning of the file. In the second step, these Classes will be defined.</p>

<h4><strong> STEP 2 </strong></h4>

<p>In this step the Classes that create your configuration pages must be created. Here, it will be defined a window with configuration options (inputs and output of your workflow basically) for each one of your modules/submodules. For this purpose, it is neccessary to create a new file in the <a href="https://github.com/FCP-INDI/C-PAC/tree/master/CPAC/GUI/interface/pages">&lsquo;pages&rsquo; directory</a>, other files can be used an example.</p>

<p>The main window of the module (in our example the 48) is usually referred to an html file explaining what this module does and how does it work. If you don&rsquo;t have such file yet, you can leave it blank. For the rest of submodules, as CPAC&rsquo;s has its own framework built over <a href="http://www.wxpython.org/">wx</a>, we can choose between many specific buttons and data tpyes to add to our window:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">control</span> <span class="o">=</span> <span class="n">enum</span><span class="p">(</span><span class="n">CHOICE_BOX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>               <span class="n">TEXT_BOX</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>               <span class="n">COMBO_BOX</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>               <span class="n">INT_CTRL</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>               <span class="n">FLOAT_CTRL</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>               <span class="n">DIR_COMBO_BOX</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>               <span class="n">CHECKLIST_BOX</span> <span class="o">=</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>               <span class="n">LISTBOX_COMBO</span> <span class="o">=</span> <span class="mi">7</span><span class="p">,</span>
</span><span class='line'>               <span class="n">TEXTBOX_COMBO</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
</span><span class='line'>               <span class="n">CHECKBOX_GRID</span> <span class="o">=</span> <span class="mi">9</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">dtype</span> <span class="o">=</span> <span class="n">enum</span><span class="p">(</span><span class="n">BOOL</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>             <span class="n">STR</span><span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>             <span class="n">NUM</span><span class="o">=</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>             <span class="n">LBOOL</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>             <span class="n">LSTR</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>             <span class="n">LNUM</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>             <span class="n">LOFL</span> <span class="o">=</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>             <span class="n">COMBO</span> <span class="o">=</span> <span class="mi">7</span><span class="p">,</span>
</span><span class='line'>             <span class="n">LDICT</span><span class="o">=</span> <span class="mi">8</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is an example of how it can be a GUI frame for our toolbox:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">InformationTheory</span><span class="p">(</span><span class="n">wx</span><span class="o">.</span><span class="n">ScrolledWindow</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">):</span>
</span><span class='line'>        <span class="n">wx</span><span class="o">.</span><span class="n">ScrolledWindow</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">counter</span> <span class="o">=</span> <span class="n">counter</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">page</span> <span class="o">=</span> <span class="n">GenericClass</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">&quot;Information Theory Calculation Options&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">page</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;Run Information Theory Measures&quot;</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">control</span><span class="o">=</span><span class="n">control</span><span class="o">.</span><span class="n">CHOICE_BOX</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">name</span><span class="o">=</span><span class="s">&#39;runIT&#39;</span><span class="p">,</span>
</span><span class='line'>                 <span class="nb">type</span><span class="o">=</span><span class="n">dtype</span><span class="o">.</span><span class="n">LSTR</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">comment</span><span class="o">=</span><span class="s">&quot;Run Information Theory Measures&quot;</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">values</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;Off&quot;</span><span class="p">,</span><span class="s">&quot;On&quot;</span><span class="p">],</span>
</span><span class='line'>                 <span class="n">wkf_switch</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">page</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;Voxelwise / ROI extraction&quot;</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">control</span><span class="o">=</span><span class="n">control</span><span class="o">.</span><span class="n">CHOICE_BOX</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">name</span><span class="o">=</span><span class="s">&#39;voxel_roi&#39;</span><span class="p">,</span>
</span><span class='line'>                 <span class="nb">type</span><span class="o">=</span><span class="n">dtype</span><span class="o">.</span><span class="n">LSTR</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">comment</span><span class="o">=</span><span class="s">&quot;Run Information Theory Measures voxelwise or after ROI timeseries             extraction&quot;</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span><span class="p">[</span><span class="s">&quot;Voxelwise&quot;</span><span class="p">,</span><span class="s">&quot;ROI&quot;</span><span class="p">,</span><span class="s">&quot;Voxelwise/ROI&quot;</span><span class="p">],</span>
</span><span class='line'>                 <span class="n">wkf_switch</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">page</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;fMRI image&quot;</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">control</span><span class="o">=</span><span class="n">control</span><span class="o">.</span><span class="n">COMBO_BOX</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">name</span><span class="o">=</span><span class="s">&#39;input_image&#39;</span><span class="p">,</span>
</span><span class='line'>                     <span class="nb">type</span><span class="o">=</span><span class="n">dtype</span><span class="o">.</span><span class="n">STR</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">comment</span><span class="o">=</span><span class="s">&quot;fMRI image for calculation&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">page</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;Parcellation Mask&quot;</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">control</span><span class="o">=</span><span class="n">control</span><span class="o">.</span><span class="n">COMBO_BOX</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">name</span><span class="o">=</span><span class="s">&#39;input_mask&#39;</span><span class="p">,</span>
</span><span class='line'>                     <span class="nb">type</span><span class="o">=</span><span class="n">dtype</span><span class="o">.</span><span class="n">STR</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">comment</span><span class="o">=</span><span class="s">&quot;Parcellation Mask if you want to calculate&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">page</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">label</span> <span class="o">=</span> <span class="s">&quot;Measures:&quot;</span><span class="p">,</span>
</span><span class='line'>                      <span class="c">#control = control.CHECKLISTBOX_COMBO,</span>
</span><span class='line'>                      <span class="n">control</span> <span class="o">=</span> <span class="n">control</span><span class="o">.</span><span class="n">LISTBOX_COMBO</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Measures&quot;</span><span class="p">,</span>
</span><span class='line'>                      <span class="nb">type</span> <span class="o">=</span> <span class="n">dtype</span><span class="o">.</span><span class="n">LDICT</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">values</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;Entropy&#39;</span><span class="p">,</span> <span class="s">&#39;Conditional Entropy&#39;</span><span class="p">,</span><span class="s">&#39;Mutual Information&#39;</span><span class="p">,</span><span class="s">&#39;Transfer Entropy&#39;</span><span class="p">,</span><span class="s">&#39;Entropy Correlation Coefficient&#39;</span><span class="p">],</span>
</span><span class='line'>                      <span class="n">comment</span> <span class="o">=</span> <span class="s">&quot;Select which IT measures to apply:</span><span class="se">\n</span><span class="s">&quot;</span>\
</span><span class='line'>                                <span class="s">&quot;ent = Entropy</span><span class="se">\n</span><span class="s">&quot;</span>\
</span><span class='line'>                                 <span class="s">&quot;condent = Conditional Entropy</span><span class="se">\n</span><span class="s">&quot;</span>\
</span><span class='line'>                                 <span class="s">&quot;mi = Mutual Information</span><span class="se">\n</span><span class="s">&quot;</span>\
</span><span class='line'>                                 <span class="s">&quot;te = Transfer Entropy</span><span class="se">\n</span><span class="s">&quot;</span>\
</span><span class='line'>                                 <span class="s">&quot;ecc = Entropy Correlation Coefficient</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">size</span> <span class="o">=</span> <span class="p">(</span><span class="mi">300</span><span class="p">,</span><span class="mi">120</span><span class="p">),</span>
</span><span class='line'>                     <span class="n">combo_type</span> <span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">page</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">&quot;Output Options &quot;</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">control</span><span class="o">=</span><span class="n">control</span><span class="o">.</span><span class="n">CHECKLIST_BOX</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">name</span><span class="o">=</span><span class="s">&quot;measure_options&quot;</span><span class="p">,</span>
</span><span class='line'>                      <span class="nb">type</span><span class="o">=</span><span class="n">dtype</span><span class="o">.</span><span class="n">LBOOL</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">values</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;CSV&#39;</span><span class="p">,</span> <span class="s">&#39;NUMPY&#39;</span><span class="p">,</span><span class="s">&#39;NIFTI&#39;</span><span class="p">],</span>
</span><span class='line'>                      <span class="n">comment</span><span class="o">=</span><span class="s">&quot;By default, results are written as NIFTI files. Additional output formats are as a .csv spreadsheet or a Numpy array.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">page</span><span class="o">.</span><span class="n">set_sizer</span><span class="p">()</span>
</span><span class='line'>        <span class="n">parent</span><span class="o">.</span><span class="n">get_page_list</span><span class="p">()</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is important to update the <strong>init</strong> file of the folder &lsquo;pages&rsquo; to make the new file available and checking all the intermodule dependencies and imports.
After doing these modifications, the modifications will be seen as long as the <a href="https://github.com/FCP-INDI/C-PAC/blob/master/CPAC/GUI/mainUI.py">MainUI</a> file runs without problem.</p>

<p>In the next figure, it can be seen how the example code is translated into the GUI:</p>

<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/CPAC_GUI.png" width="800" height="800" title="image" alt="image"></p>

<p>After completing your configuration, a YAML file will be created with the information provided into the different inputs.</p>

<h2><strong> Link the GUI with your workflows </strong></h2>

<h4><strong> STEP 3 </strong></h4>

<p>This is probably the most important step along with having a good planification of the needs of the module. The objective here is to link the configuration window of each of the submodules with the corresponding workflow through the pipeline module and specifically the <a href="https://github.com/FCP-INDI/C-PAC/blob/master/CPAC/pipeline/cpac_pipeline.py">cpac_pipeline</a> file, allowing the execution of your workflows.</p>

<p>First of all, it is needed to import the workflows into the file. After that, and having as a reference other workflow insertions, you can take the input data saved in the previous step from a <a href="https://github.com/FCP-INDI/C-PAC/blob/master/CPAC/utils/configuration.py">Configuration object</a> called &lsquo;c&rsquo;. This ‘c’ variable is an abstract representation used to store the options for the pipeline configuration YAML. The use of the YAML file, allows users to load preconfigured files easily.
The YAML was generated by the GUI in the previous step and it is reloaded back in by <a href="https://github.com/FCP-INDI/C-PAC/blob/afbc30e28e4c282847920119e922953690835d36/CPAC/pipeline/cpac_runner.py#L381">cpac_runner</a>  as a Configuration object (‘c’).  Finally, <em>cpac_runner.py</em> passes the Configuration object to <em>cpac_pipeline.py</em> as an argument.</p>

<p>There is the need of checking if the inputs are correct (otherwise, raise an error message), create the workflow and give to it the inputs extracted from &lsquo;c&rsquo;.
<em>cpac_pipeline.py</em> is where the Nipype workflow object for each pipeline strategy is constructed via flow control. We will want to add a code block similar to <a href="https://github.com/FCP-INDI/C-PAC/blob/master/CPAC/pipeline/cpac_pipeline.py#L3028-L3197">this</a>  in order to add the nonlinear time-series node to these workflows.  The functions will be encapsulated within nodes and connected to a workflow.</p>

<p>Short example of how to manage the inputs:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'>    <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">    Inserting NLTSA</span>
</span><span class='line'><span class="sd">    Workflow</span>
</span><span class='line'><span class="sd">    &#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">new_strat_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">num_strat</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="mi">1</span> <span class="ow">in</span> <span class="n">c</span><span class="o">.</span><span class="n">runIT</span><span class="p">:</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">strat</span> <span class="ow">in</span> <span class="n">strat_list</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="s">&#39;mi&#39;</span> <span class="ow">in</span> <span class="n">c</span><span class="o">.</span><span class="n">MEASURES</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">pipeline</span> <span class="o">=</span> <span class="n">create_mi</span><span class="p">()</span>
</span><span class='line'>            <span class="n">pipeline</span><span class="o">.</span><span class="n">inputs</span><span class="o">.</span><span class="n">inputspec</span><span class="o">.</span><span class="n">in_file</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">input_image</span>
</span><span class='line'>            <span class="n">pipeline</span><span class="o">.</span><span class="n">inputs</span><span class="o">.</span><span class="n">inputspec</span><span class="o">.</span><span class="n">mask_file</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">input_mask</span>
</span><span class='line'>            <span class="n">pipeline</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">num_strat</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">strat_list</span> <span class="o">+=</span> <span class="n">new_strat_list</span>
</span></code></pre></td></tr></table></div></figure>


<p>After completing this last step, the new module of CPAC should be working.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Over ADHD Patients Data]]></title>
    <link href="http://erramuzpe.github.io/C-PAC/blog/2015/07/09/testing-different-parcellations-over-ad-patients-data/"/>
    <updated>2015-07-09T11:23:22+02:00</updated>
    <id>http://erramuzpe.github.io/C-PAC/blog/2015/07/09/testing-different-parcellations-over-ad-patients-data</id>
    <content type="html"><![CDATA[<p>This week we have been clarifying the issues involved on MVGC’s statistical model. Namely, the model to calculate the residuals that we use to measure the causality could be interpreted in a different way that we need to have well settled. Once we have identified the problem and clarified how this model should better be, we will shortly readdress and implement the experimentation done.</p>

<h4>Testing on real datasets</h4>

<p>We did our first systematic efforts to test workflows integrally with fMRI data and find if the results were coherent with the technique.</p>

<h5>Materials and methods:</h5>

<ul>
<li>Data was used from the <a href="http://neurobureau.projects.nitrc.org/ADHD200/Introduction.html">ADHD200 initiative</a> as recommended . For this purpose, I selected the preprocessed NeuroImage dataset (4mm voxel size).</li>
<li>Data sampling: After having downloaded the data, we ruled out several subjects from the study (left handed&hellip;), resulting in 34 total subjects and then they were classified in 2 main groups: Controls and ADHD patients (20/14).</li>
<li>Image processing: I extracted the mean timeseries of this data using the cc400 and cc1000 masks and performed a test analysis. Corr, TE and MI  were computed over the series. Here I show resulting matrixes for the cc400 parcellation (results for cc1000 were similar).</li>
</ul>


<p><img class="right" src="http://erramuzpe.github.io/C-PAC/images/AD_400.png" width="400" height="400" title="image" alt="image"></p>

<p>First numbers showed than calculating the mean CC, TE and MI matrices for each group, most of the measures were close to 0. The results for the 1000 ROI parcellation was similar. This is a behaviour that it was also shown for the YALE preprocessed subsample (ABIDE) that we have been using in previous attempts for these high parcellated masks.</p>

<p>We tried a similar approach with the data already extracted for cc400 and TT parcellations and while cc400 showed same results as our self-extracted series (we can say that our extraction method works fine) the TT parcellated data showed the following structures:</p>

<p><img class="left" src="http://erramuzpe.github.io/C-PAC/images/AD_400_TT.png" width="400" height="400" title="image" alt="image"></p>

<p>One can visually appreciate slight changes in ADHD patients compared to controls. There is the need of further analyzing these results, but it is not the aim of this study. This result outlined the possibility that some parcellations are better suited for specific analyses, and that the ability of different ROI layouts to parcellate a brain, may impact on the capacity of extracting information from the dataset.</p>

<p>Being the calculation of the measures the same for 90, 400 and 1000 regions, I can just visually appreciate clear structures in the parcellation of 90 regions (which does not actually say much about the data, that should be furtherly analyzed). This could have a major reason in the way that different parcellation masks are created. The measures were also tested over the same data in Matlab having the same results to test wheter our methods were correct or not.</p>

<h4>Repository and invitation to collaborate</h4>

<p>It was an important moment for us to be able to start interact on Github for two main reasons. Firstly, to be able to discuss and comment in a more applied way and have this in a single repository that everyone included on the complexity toolboxes could access (included CMI!). And secondly to have a repository that deployed on our cluster allow us to process large datasets to validate and document. This repository has unified on:</p>

<p><a href="https://github.com/roijo/C-PAC_complexitytools">https://github.com/roijo/C-PAC_complexitytools</a></p>

<p>Similarly, knowing well ADHD200 and ABIDE (CORR is also there) was a necessary task to do that we are doing in common.</p>

<p>Finally, I have added a slightly modificated function used in a previous work by Cameron, that saves the results into a Nifti file, making it easier to keep the results and export them.</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Midterm Summary and Next Objectives]]></title>
    <link href="http://erramuzpe.github.io/C-PAC/blog/2015/06/30/midterm-summary-and-next-objectives/"/>
    <updated>2015-06-30T12:02:55+02:00</updated>
    <id>http://erramuzpe.github.io/C-PAC/blog/2015/06/30/midterm-summary-and-next-objectives</id>
    <content type="html"><![CDATA[<p>As we have reached the midterm of the project, We are writing this post as a summary of what we have been working on and which are our next objectives. Our overall evaluation of our work is positive and we are excited about keep the coding and learning.</p>

<h4><strong>Theory and discussion</strong></h4>

<p>In one hand, we have been weekly discussing about the measures we had to implement, having debates about the information we could get from them and feasibility and practicality of these measures integrated in CPAC and in terms of development. Also, it has been a hard-work of researching and learning about new techniques and tools used in the field, linked not only to measures related to non-linear analysis of the series, but also to a wide variety of preprocessing techniques, optimization and python language learning. Our weekly discussions about data and integration of other imaging environments and other parts of CPAC (ie. FSL have been stimulating).</p>

<h4><strong>Coding</strong></h4>

<p>In the other hand, as a consequence of the previous point, we have accomplished the goal of implementing several measures, helper functions and tools building partially a toolbox for the analysis of non-linear information of series that will need triming and revision, on the principles of utility and complementarity. Organisation of these measures and outputs are also to come.</p>

<p>I have developed 4 working workflows of measures based on correlation and Information Theory between pairs of variables (Ivan has developed others complementing my work):</p>

<ul>
<li>Correlation WF</li>
<li>Partial Correlation WF</li>
<li>Mutual Information WF</li>
<li>Transfer Entropy WF</li>
</ul>


<p>Additionally, the toolbox has several measures and helper functions some more completed than others that we are polishing and comparing to select some as to include in the toolbox:</p>

<ul>
<li>Shannon entropy</li>
<li>ApEn and SampEn (sampling entropies)</li>
<li>Conditional entropies</li>
<li>Entropy Correlation Coefficient</li>
<li>Phase synchronization (as explained in my last entry)</li>
<li>Phase Locking Values</li>
<li>TE based in covariances for gaussian variables (no need of discretization).</li>
<li>Entropy Correlation Coefficient</li>
<li>Helper functions:

<ul>
<li>Voxel-wise timeseries generator from fMRI data</li>
<li>ROI timeseries generator from fMRI data</li>
<li>Transform (BIC discretization of signals based on Equiquantization criteria and discretization formalisms by Ivan)</li>
<li>Frequency filters and bands</li>
<li>Phase extractors</li>
</ul>
</li>
</ul>


<p>And also a Granger Causality (GC) module (Implementing Pairwise Conditional GC and MultiVariate GC using a VAR model) that still is under last testings and bug-correcting phase with the following functions that can be found in <a href="https://github.com/erramuzpe/C-PAC/blob/series_mod/CPAC/series_mod/mvgc.py">GitHub</a>:</p>

<ul>
<li>Granger Causality functions based on VAR model:

<ul>
<li>tsdata_to_autocov: Timeseries to autocovariance matrix calculation</li>
<li>autocov_to_var: Calculation of the coefficients and the residuals using the VAR model.</li>
<li>autocov_to_pwcgc: Calculation of the Pairwise Granger Causality using the residuals previously calculated.</li>
<li>autocov_to_mvgc: Calculation of the Multivariate Granger Causality using the residuals previously calculated.</li>
</ul>
</li>
</ul>


<h4><strong>Testing over real data</strong></h4>

<p>Finally, there has been an application of the developed measures to real fMRI data, having reported some preliminary results. These results can be found in previous entries of this blog:</p>

<p><a href="http://erramuzpe.github.io/C-PAC/blog/2015/06/03/advances-of-the-last-week/">Correlation, Entropies and Mutual Information</a>, <a href="http://erramuzpe.github.io/C-PAC/blog/2015/06/17/new-measures-transfer-entropy/">Transfer Entropy</a> and <a href="http://erramuzpe.github.io/C-PAC/blog/2015/06/18/some-examples-with-phase-synchrony-measures/">Phase Synchrony</a>.</p>

<p>We are towards starting using extensively the NCoRR database for real data usage with the measures and establish the use of new atlases to extend the 90 ROIs that we have been working with to 512 or/and 1024 regions and voxel-wise for modelisation in our cluster. Also, we are dedicated to graphic representation and results for documentation. An basic idea idea of how we could represent our matrices using networkx capabilities is explained <a href="http://wiki.biac.duke.edu/biac:analysis:resting_pipeline">here</a> as orientative, by taking correlation matrixes (could be any other measure&rsquo;s bi-directional results matrix) and generating figures like these:</p>

<p><img class="left" src="http://wiki.biac.duke.edu/_media/biac:analysis:3d_functionalconnectome.png?cache=&w=900&h=738&tok=7a2a44" width="350" height="350" title="image" alt="image"></p>

<p><img class="center" src="http://wiki.biac.duke.edu/_media/biac:analysis:2d_functionalconnectome.png?w=400&h=442&tok=5ee755" width="300" height="350" title="image" alt="image"></p>

<hr />

<h2><strong>Next objectives</strong></h2>

<p>Even if we are successfully completing our initial plan, we have still work to do:</p>

<p>The obvious point is that testing these tools in real data and modelling them and their parameters for robustness and effective documentation, comparing also several situations and testing the code efficiency and stability.</p>

<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/calendar_midterm.png" width="500" height="500" title="image" alt="image"></p>

<p>Other practicalities I would like to point some TO-DO&rsquo;s and objectives towards the second (and last) part of the project:</p>

<ul>
<li>Merging of both students repositories and having a copy of it in a cluster, allowing running studies on it.</li>
<li>Solve code problems and developer strategies alike to CPAC already existing code (efficiency and some errors in measures).</li>
<li>Work on the integration with CPAC (GUI building and dependencies).</li>
<li>Keep following the initial plan: Cross-entropies, Fingerprints and Avalanche-point process modelisation. Discuss extensively about features to add, most relevant measures and future aplications over real data.</li>
<li>Implement measures of multiscale dynamics .</li>
<li>We have now a primitive and easy version of calculating the numbers of bins via Equantization. We are discussing more advanced methods to do it and it is likely to develop an alternative.</li>
<li>Related to frecuencies (develop using what we already have as a base):

<ul>
<li>Implement Sample Entropies.</li>
<li>Fingerprints -> Determine important frequencies. Use of the power spectrum.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Examples With Phase Synchrony Measures]]></title>
    <link href="http://erramuzpe.github.io/C-PAC/blog/2015/06/18/some-examples-with-phase-synchrony-measures/"/>
    <updated>2015-06-18T15:02:43+02:00</updated>
    <id>http://erramuzpe.github.io/C-PAC/blog/2015/06/18/some-examples-with-phase-synchrony-measures</id>
    <content type="html"><![CDATA[<p>The <a href="https://en.wikipedia.org/wiki/Hilbert_transform">Hilbert Transform</a> is a linear operator which takes a function, u(t), and produces a function, H(u)(t), with the same domain.</p>

<p>In python, we can compute the <a href="http://en.wikipedia.org/wiki/Analytic_signal">analytic signal</a>, using the Hilbert transform. This analytic signal is used for many things, like computing the envelope of a signal or the instantaneous phase of the signal.
Our calculation of the instantaneous phase is in the range [0,1], computed over the cos() function of the angle of the Hilbert Transform coefficients.
We have choosen a random signal of an fMRI file to show the example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">env</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">abs</span><span class="p">(</span><span class="n">sigtool</span><span class="o">.</span><span class="n">hilbert</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">ht</span> <span class="o">=</span> <span class="n">sigtool</span><span class="o">.</span><span class="n">hilbert</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="n">px</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">angle</span><span class="p">(</span><span class="n">ht</span><span class="p">)</span> <span class="c"># instantaneous phase</span>
</span><span class='line'><span class="n">inst_p</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">((</span><span class="n">np</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">px</span><span class="p">))</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="c"># modulus of the angle in [0,1]</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/signal_env.png" width="500" height="500" title="image" alt="image"></p>

<p>With this instantaneous phase, we can code easyly the two functions that were shown in the previous post, the Phase Synchronization parameter and the Phase Locking Value. For visualization purposes, here is shown a good example of three signals, the first one is from a region far from the other ones. The last two signals are in regions close to another (it is supposed they will be more synchronized between them than with the first one, which is distant).</p>

<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/signals_phase.png" width="500" height="500" title="image" alt="image"></p>

<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/signals_phase2.png" width="500" height="500" title="image" alt="image"></p>

<p>The PLV values, validating our initial hypothesis, are the following:</p>

<ul>
<li>PLV(S1,S2) = 0.43</li>
<li>PLV(S1,S3) = 0.41</li>
<li>PLV(S2,S3) = 0.86</li>
</ul>


<p>The PLV values for the 90 regions for a particular random subject of our dataset is shown in the next picture:</p>

<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/PLV_mat.png" width="350" height="350" title="image" alt="image"></p>

<p>Which unveils similar structures to the ones got with TE, MI and Correlations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Measures: Transfer Entropy, Phase Synchronization and Phase Locking Value]]></title>
    <link href="http://erramuzpe.github.io/C-PAC/blog/2015/06/17/new-measures-transfer-entropy/"/>
    <updated>2015-06-17T11:34:54+02:00</updated>
    <id>http://erramuzpe.github.io/C-PAC/blog/2015/06/17/new-measures-transfer-entropy</id>
    <content type="html"><![CDATA[<p>This week we have been centered in developing new measures for C-PAC. The first one, Transfer Entropy, is related to the first measures we did (Entropy, Mutual Information) addind a lag-time to one of the series, while the second and the third ones have a frequency based approach based on phase synchronization analysys.</p>

<h2><strong>Transfer Entropy</strong></h2>

<p>The Transfer Entropy has been developed following our interest in measures which would compare past of the signals with his later values (like Granger Causality) and mixing with the Information Theory concept.</p>

<p><a href="https://en.wikipedia.org/wiki/Transfer_entropy">Transfer Entropy</a> is a non-parametric statistic measuring the amount of directed (time-asymmetric) transfer of information between two random processes. Transfer entropy from a process X to another process Y is the amount of uncertainty reduced in future values of Y by knowing the past values of X given past values of Y and is denoted as:</p>

<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/TE_formula.png" width="500" height="500" title="image" alt="image"></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">transfer_entropy</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">lag</span><span class="p">):</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">CPAC.series_mod</span> <span class="kn">import</span> <span class="n">cond_entropy</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">CPAC.series_mod</span> <span class="kn">import</span> <span class="n">entropy</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># future of i</span>
</span><span class='line'>    <span class="n">Fi</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">roll</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="o">-</span><span class="n">lag</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># past of i</span>
</span><span class='line'>    <span class="n">Pi</span> <span class="o">=</span> <span class="n">X</span>
</span><span class='line'>    <span class="c"># past of j</span>
</span><span class='line'>    <span class="n">Pj</span> <span class="o">=</span> <span class="n">Y</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#Transfer entropy</span>
</span><span class='line'>    <span class="n">Inf_from_Pi_to_Fi</span> <span class="o">=</span> <span class="n">cond_entropy</span><span class="p">(</span><span class="n">Fi</span><span class="p">,</span> <span class="n">Pi</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#same as cond_entropy(Fi, Pi_Pj)</span>
</span><span class='line'>    <span class="n">Hy</span> <span class="o">=</span> <span class="n">entropy</span><span class="p">(</span><span class="n">Pi</span><span class="p">,</span><span class="n">Pj</span><span class="p">)</span>
</span><span class='line'>    <span class="n">Hyx</span> <span class="o">=</span> <span class="n">entropy</span><span class="p">(</span><span class="n">Fi</span><span class="p">,</span><span class="n">Pj</span><span class="p">,</span><span class="n">Pi</span><span class="p">)</span>
</span><span class='line'>    <span class="n">Inf_from_Pi_Pj_to_Fi</span> <span class="o">=</span> <span class="n">Hyx</span> <span class="o">-</span> <span class="n">Hy</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">TE_from_j_to_i</span> <span class="o">=</span> <span class="n">Inf_from_Pi_to_Fi</span><span class="o">-</span><span class="n">Inf_from_Pi_Pj_to_Fi</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">TE_from_j_to_i</span>
</span></code></pre></td></tr></table></div></figure>


<p>From this, we have built also a workflow that allows to calculate the TE values over a series of fMRI data. A first test has been carried out with real data using the same dataset of previous entries (a series of 28 subjects and a parcellation of 90 ROIs). Descriptively, mean values over subjects for the TE calculation was reported (left) and connectivity as unweighted was found by thresholding TE values with 0.7 (right).</p>

<p><img class="left" src="http://erramuzpe.github.io/C-PAC/images/TE_mean.png" width="300" height="300" title="image" alt="image">
<img class="right" src="http://erramuzpe.github.io/C-PAC/images/TE_conn.png" width="400" height="400" title="image" alt="image"></p>

<h2><strong>Phase synchronization and PLV</strong></h2>

<p>As explained las week, we can obtain the analytical signals using the Hilbert transform. This analytic signal represents a signal in the time domain as a rotating vector with an instantaneous phase, phi(t), and amplitude.</p>

<p>The global level of phase synchrony is given by the parameter R(t), after calculating the modulus of the phase, taking values in the [0,1] range (being 0 completely asynchroneous and 1 completely synchronized, respectively):</p>

<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/r_param.png" width="300" height="300" title="image" alt="image"></p>

<p>Which, translated to python, is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">phase_sync</span><span class="p">(</span><span class="n">X</span><span class="p">):</span> <span class="c"># Computes the PS_value as explained in Ponce et al. 2015</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">scipy.signal.signaltools</span> <span class="kn">as</span> <span class="nn">sigtool</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">htx</span> <span class="o">=</span> <span class="n">sigtool</span><span class="o">.</span><span class="n">hilbert</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># This converts (real, imag) to an angle</span>
</span><span class='line'>    <span class="n">px</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">angle</span><span class="p">(</span><span class="n">htx</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">px</span><span class="p">))</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">px</span><span class="p">))</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="c">#PS_value calculated with the module</span>
</span></code></pre></td></tr></table></div></figure>


<p>For quantifying the pairwise phase relation between two given brain regions (timeseries) <em>k</em> and <em>l</em>, Phase-Locking Value (PLV) has to be calculated as:</p>

<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/plv.png" width="300" height="300" title="image" alt="image"></p>

<p>Again, translated to python:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">PLV</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">):</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">scipy.signal.signaltools</span> <span class="kn">as</span> <span class="nn">sigtool</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">htx</span> <span class="o">=</span> <span class="n">sigtool</span><span class="o">.</span><span class="n">hilbert</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</span><span class='line'>    <span class="n">hty</span> <span class="o">=</span> <span class="n">sigtool</span><span class="o">.</span><span class="n">hilbert</span><span class="p">(</span><span class="n">Y</span><span class="p">)</span>
</span><span class='line'>    <span class="n">px</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">angle</span><span class="p">(</span><span class="n">htx</span><span class="p">)</span>
</span><span class='line'>    <span class="n">py</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">angle</span><span class="p">(</span><span class="n">hty</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">psi</span> <span class="o">=</span> <span class="n">px</span> <span class="o">-</span> <span class="n">py</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">cos</span><span class="p">(</span><span class="n">psi</span><span class="p">))</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">sin</span><span class="p">(</span><span class="n">psi</span><span class="p">))</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="c">#PLV_value calculated with the module</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some examples with regard of phase synchronization measures will be shown in the next entry of the blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Towards Frequency Domain Analysis and Phase Synchronization]]></title>
    <link href="http://erramuzpe.github.io/C-PAC/blog/2015/06/11/towards-frequency-domain-analysis-phase-synchronization/"/>
    <updated>2015-06-11T11:54:16+02:00</updated>
    <id>http://erramuzpe.github.io/C-PAC/blog/2015/06/11/towards-frequency-domain-analysis-phase-synchronization</id>
    <content type="html"><![CDATA[<p>This week we have been discussing further about the possibility of developing some frequency analysis tools to integrate in the package. Although CPAC already has some tools to work on the frequency domain, we are thinking in building up some valuable scripts that allow us to capture information using the frequency domain. Our intention is to develop measures such Phase Synchronization and identification of patterns based on frequency domain analysis, to be used as features for Fingerprint analysis. Specifically, as starting point, we are going to take as guide and example the methods described in the paper by Ponce et al. <a href="http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004100">[1]</a>, with the intention of performing a similar analysis over fMRI. Our goal is to do so and extending them with measures like temporal power spectral density (PSDT).</p>

<h2><strong>Phase synchronization analysis</strong></h2>

<p>This kind of analysis needs of the extraction ef the phases of the fMRI timeseries. We can obtain the analytical signals using the Hilbert transform. This analytic signal represents a signal in the time domain as a rotating vector with an instantaneous phase, phi(t), and amplitude.</p>

<p>The global level of phase synchrony is given by the parameter R(t), taking values in the [0,1] range (being 0 completely asynchroneous and 1 completely synchronized, respectively):</p>

<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/r_param.png" width="300" height="300" title="image" alt="image"></p>

<p>For quantifying the pairwise phase relation between two given brain regions (timeseries) <em>k</em> and <em>l</em>, Phase-Locking Value (PLV) has to be calculated as:</p>

<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/plv.png" width="300" height="300" title="image" alt="image"></p>

<p>Last week, I already deveveloped a simple filter and this week I have been practicing further with the numpy.signal package. Some example of code, partially changed from <a href="http://gribblelab.org/scicomp/09_Signals_sampling_filtering.html">this</a> excellent tutorial. Under each block of code, I have plotted an example over fMRI data (it is clear that the used data has been already preprocessed and filtered):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'>  <span class="kn">from</span> <span class="nn">numpy</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>  <span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="o">*</span> <span class="c"># not a good practice, but just for the examples</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># Power Spectra calculation</span>
</span><span class='line'>  <span class="c"># construct signal</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1001</span><span class="p">)</span>
</span><span class='line'>  <span class="n">y</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">pi</span><span class="o">*</span><span class="n">t</span><span class="o">*</span><span class="mi">6</span><span class="p">)</span> <span class="o">+</span> <span class="n">sin</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">pi</span><span class="o">*</span><span class="n">t</span><span class="o">*</span><span class="mi">10</span><span class="p">)</span> <span class="o">+</span> <span class="n">sin</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">pi</span><span class="o">*</span><span class="n">t</span><span class="o">*</span><span class="mi">13</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># compute FFT and the magnitude spectrum</span>
</span><span class='line'>  <span class="n">F</span> <span class="o">=</span> <span class="n">fft</span><span class="o">.</span><span class="n">fft</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>  <span class="n">N</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>             <span class="c"># number of samples</span>
</span><span class='line'>  <span class="n">dt</span> <span class="o">=</span> <span class="mf">0.001</span>             <span class="c"># inter-sample time difference</span>
</span><span class='line'>  <span class="n">w</span> <span class="o">=</span> <span class="n">fft</span><span class="o">.</span><span class="n">fftfreq</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>     <span class="c"># gives us a list of frequencies for the FFT</span>
</span><span class='line'>  <span class="n">ipos</span> <span class="o">=</span> <span class="n">where</span><span class="p">(</span><span class="n">w</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">freqs</span> <span class="o">=</span> <span class="n">w</span><span class="p">[</span><span class="n">ipos</span><span class="p">]</span>        <span class="c"># only look at positive frequencies</span>
</span><span class='line'>  <span class="n">mags</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">F</span><span class="p">[</span><span class="n">ipos</span><span class="p">])</span>    <span class="c"># magnitude spectrum</span>
</span><span class='line'>  <span class="n">phase</span> <span class="o">=</span> <span class="n">imag</span><span class="p">(</span><span class="n">F</span><span class="p">[</span><span class="n">ipos</span><span class="p">])</span>  <span class="c"># phase component</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/plot1.png" width="300" height="300" title="image" alt="image"></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'>  <span class="c"># Inverse Fast Fourier transform (IFFT) (reconstruction from freq domain)</span>
</span><span class='line'>  <span class="c"># construct signal</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1001</span><span class="p">)</span>
</span><span class='line'>  <span class="n">y</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">pi</span><span class="o">*</span><span class="n">t</span><span class="o">*</span><span class="mi">6</span><span class="p">)</span> <span class="o">+</span> <span class="n">sin</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">pi</span><span class="o">*</span><span class="n">t</span><span class="o">*</span><span class="mi">10</span><span class="p">)</span> <span class="o">+</span> <span class="n">sin</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">pi</span><span class="o">*</span><span class="n">t</span><span class="o">*</span><span class="mi">13</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># compute FFT and the magnitude spectrum</span>
</span><span class='line'>  <span class="n">F</span> <span class="o">=</span> <span class="n">fft</span><span class="o">.</span><span class="n">fft</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>  <span class="n">N</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>             <span class="c"># number of samples</span>
</span><span class='line'>  <span class="n">dt</span> <span class="o">=</span> <span class="mf">0.001</span>             <span class="c"># inter-sample time difference</span>
</span><span class='line'>  <span class="n">w</span> <span class="o">=</span> <span class="n">fft</span><span class="o">.</span><span class="n">fftfreq</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>     <span class="c"># gives us a list of frequencies for the FFT</span>
</span><span class='line'>  <span class="n">ipos</span> <span class="o">=</span> <span class="n">where</span><span class="p">(</span><span class="n">w</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">freqs</span> <span class="o">=</span> <span class="n">w</span><span class="p">[</span><span class="n">ipos</span><span class="p">]</span>        <span class="c"># only look at positive frequencies</span>
</span><span class='line'>  <span class="n">mags</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">F</span><span class="p">[</span><span class="n">ipos</span><span class="p">])</span>    <span class="c"># magnitude component</span>
</span><span class='line'>  <span class="n">phase</span> <span class="o">=</span> <span class="n">imag</span><span class="p">(</span><span class="n">F</span><span class="p">[</span><span class="n">ipos</span><span class="p">])</span>  <span class="c"># phase component</span>
</span><span class='line'>  <span class="c"># inverse</span>
</span><span class='line'>  <span class="n">yr</span> <span class="o">=</span> <span class="n">fft</span><span class="o">.</span><span class="n">ifft</span><span class="p">(</span><span class="n">F</span><span class="p">)</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/figure_2.png" width="300" height="300" title="image" alt="image"></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'>  <span class="c">## Filtering</span>
</span><span class='line'>  <span class="c"># construct signal </span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1001</span><span class="p">)</span>
</span><span class='line'>  <span class="n">y</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">pi</span><span class="o">*</span><span class="n">t</span><span class="o">*</span><span class="mi">6</span><span class="p">)</span> <span class="o">+</span> <span class="n">sin</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">pi</span><span class="o">*</span><span class="n">t</span><span class="o">*</span><span class="mi">10</span><span class="p">)</span> <span class="o">+</span> <span class="n">sin</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">pi</span><span class="o">*</span><span class="n">t</span><span class="o">*</span><span class="mi">13</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c"># compute FFT and the magnitude spectrum</span>
</span><span class='line'>  <span class="n">F</span> <span class="o">=</span> <span class="n">fft</span><span class="o">.</span><span class="n">fft</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>  <span class="n">N</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>             <span class="c"># number of samples</span>
</span><span class='line'>  <span class="n">dt</span> <span class="o">=</span> <span class="mf">0.001</span>             <span class="c"># inter-sample time difference</span>
</span><span class='line'>  <span class="n">w</span> <span class="o">=</span> <span class="n">fft</span><span class="o">.</span><span class="n">fftfreq</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">dt</span><span class="p">)</span>     <span class="c"># gives us a list of frequencies for the FFT</span>
</span><span class='line'>  <span class="n">ipos</span> <span class="o">=</span> <span class="n">where</span><span class="p">(</span><span class="n">w</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">freqs</span> <span class="o">=</span> <span class="n">w</span><span class="p">[</span><span class="n">ipos</span><span class="p">]</span>        <span class="c"># only look at positive frequencies</span>
</span><span class='line'>  <span class="n">mags</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">F</span><span class="p">[</span><span class="n">ipos</span><span class="p">])</span>    <span class="c"># magnitude component</span>
</span><span class='line'>  <span class="n">phase</span> <span class="o">=</span> <span class="n">imag</span><span class="p">(</span><span class="n">F</span><span class="p">[</span><span class="n">ipos</span><span class="p">])</span>  <span class="c"># phase component</span>
</span><span class='line'>  <span class="n">ip</span> <span class="o">=</span> <span class="n">where</span><span class="p">(</span><span class="n">F</span><span class="o">&gt;</span><span class="mi">5</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>     <span class="c"># find peaks in FFT</span>
</span><span class='line'>  <span class="n">Fs</span> <span class="o">=</span> <span class="n">copy</span><span class="p">(</span><span class="n">F</span><span class="p">)</span>           <span class="c"># make a copy of the signal FFT</span>
</span><span class='line'>  <span class="n">Fs</span><span class="p">[</span><span class="n">ip</span><span class="p">[[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]]]</span> <span class="o">=</span> <span class="mi">0</span>      <span class="c"># set peaks corresponding to </span>
</span><span class='line'>
</span><span class='line'>  <span class="n">yf</span> <span class="o">=</span> <span class="n">fft</span><span class="o">.</span><span class="n">ifft</span><span class="p">(</span><span class="n">Fs</span><span class="p">)</span>          <span class="c"># reconstruct</span>
</span><span class='line'>  <span class="n">ip</span> <span class="o">=</span> <span class="n">where</span><span class="p">(</span><span class="n">F</span><span class="o">&gt;</span><span class="mi">5</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>     <span class="c"># find peaks in FFT</span>
</span><span class='line'>  <span class="n">Ff</span> <span class="o">=</span> <span class="n">copy</span><span class="p">(</span><span class="n">F</span><span class="p">)</span>           <span class="c"># make a copy of the signal FFT</span>
</span><span class='line'>  <span class="n">Ff</span><span class="p">[</span><span class="n">ip</span><span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]]]</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c"># set 10Hz and 13Hz peaks to zero</span>
</span><span class='line'>  <span class="n">magsf</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">Ff</span><span class="p">[</span><span class="n">ipos</span><span class="p">])</span>  <span class="c"># magnitude component</span>
</span><span class='line'>  <span class="n">phasef</span> <span class="o">=</span> <span class="n">imag</span><span class="p">(</span><span class="n">Ff</span><span class="p">[</span><span class="n">ipos</span><span class="p">])</span><span class="c"># phase component</span>
</span><span class='line'>  <span class="n">yf</span> <span class="o">=</span> <span class="n">fft</span><span class="o">.</span><span class="n">ifft</span><span class="p">(</span><span class="n">Ff</span><span class="p">)</span>          <span class="c"># reconstruct</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">yr</span> <span class="o">=</span> <span class="n">fft</span><span class="o">.</span><span class="n">ifft</span><span class="p">(</span><span class="n">F</span><span class="p">)</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/figure_3.png" width="300" height="300" title="image" alt="image"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multivariate Granger Causality in Python for fMRI Timeseries Analysis]]></title>
    <link href="http://erramuzpe.github.io/C-PAC/blog/2015/06/10/multivariate-granger-causality-in-python-for-fmri-timeseries-analysis/"/>
    <updated>2015-06-10T17:29:44+02:00</updated>
    <id>http://erramuzpe.github.io/C-PAC/blog/2015/06/10/multivariate-granger-causality-in-python-for-fmri-timeseries-analysis</id>
    <content type="html"><![CDATA[<p>Wiener-Granger causality (“G-causality”) is a statistical notion of causality applicable to time series data, whereby cause precedes, and helps predict, effect.
For the purpose of analysing fMRI timeseries, we have developed as a first approach a series of python scripts to calculate the Multivariate Granger Causality (MVGC) based on the <a href="http://www.sussex.ac.uk/sackler/mvgc/">MVGC toolbox</a> of Barnett &amp; Seth <a href="http://www.sciencedirect.com/science/article/pii/S0165027013003701">[1]</a>.
The most common operationalisation of G-causality, and
the one on which the MVGC Toolbox is based, utilises VAR (vector autoregression)
modelling of time series data. But it is not the only one, and our intention is to explore other options too and extend to other options that could be more robust.</p>

<p>G-causality assumes two jointly distributed vector-valued stochastic processes (“variables”) X = X1 , X2 , &hellip;, Y = Y1 , Y2 , &hellip;. We say that X does not G-cause Y if and only if Y, conditional on its own past, is independent of the past of X; intuitively, past values of X yield no information about the current value of Y beyond information already contained in the past of Y itself. If, conversely, the past of X does convey information about the future of Y above and beyond all information contained in the past of Y then we say that X G-causes Y, as you can see in the image.</p>

<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/gc.jpg" width="300" height="300" title="image" alt="image"></p>

<p>The steps to calculate MVGC are the following: We first have to compute the autocovariance matrix from the timeseries. After that, extract the coefficients with the VAR modelling and finally, perform the calculation of the MVGC. More detailed explanations and comments of the code on GitHub and the paper itself. In the following example, X is the timeseries matrix and q is the order of the model (number of lags).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">tsdata_to_autocov</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">q</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pylab</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">X</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>        <span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="p">[</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="p">[</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</span><span class='line'>    <span class="n">X</span> <span class="o">=</span> <span class="n">pylab</span><span class="o">.</span><span class="n">demean</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">G</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="p">(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="n">M</span> <span class="o">=</span> <span class="n">N</span> <span class="o">*</span> <span class="p">(</span><span class="n">m</span><span class="o">-</span><span class="n">k</span><span class="p">)</span>
</span><span class='line'>        <span class="n">G</span><span class="p">[:,:,</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">X</span><span class="p">[:,</span><span class="n">k</span><span class="p">:</span><span class="n">m</span><span class="p">,:],</span> <span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">M</span><span class="p">)),</span> <span class="n">np</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">X</span><span class="p">[:,</span><span class="mi">0</span><span class="p">:</span><span class="n">m</span><span class="o">-</span><span class="n">k</span><span class="p">,:],</span> <span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">M</span><span class="p">))</span><span class="o">.</span><span class="n">conj</span><span class="p">()</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="o">/</span> <span class="n">M</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">G</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the calculation of the MVGC, inputs needed are G (autocovariance sequence), x (vector of indices of target (causee) multi-variable) and y (vector of indices of source (causal) multi-variable). The MVGC calculation, extracts the coefficients with the VAR model of all variables (x, y, z) and then without the source (x,z).  The output F is the Granger Causality itself.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">autocov_to_mvgc</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">mvgc</span> <span class="kn">import</span> <span class="n">autocov_to_var</span>
</span><span class='line'>  
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">G</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">z</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="n">z</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">z</span><span class="p">,[</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)))])</span>
</span><span class='line'>    <span class="c"># indices of other variables (to condition out)</span>
</span><span class='line'>    <span class="n">xz</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">z</span><span class="p">)))</span>
</span><span class='line'>    <span class="n">xzy</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">xz</span><span class="p">,</span> <span class="n">y</span><span class="p">)))</span>
</span><span class='line'>    <span class="n">F</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># full regression</span>
</span><span class='line'>    <span class="n">ixgrid1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ix_</span><span class="p">(</span><span class="n">xzy</span><span class="p">,</span><span class="n">xzy</span><span class="p">)</span>
</span><span class='line'>    <span class="p">[</span><span class="n">AF</span><span class="p">,</span><span class="n">SIG</span><span class="p">]</span> <span class="o">=</span> <span class="n">autocov_to_var</span><span class="p">(</span><span class="n">G</span><span class="p">[</span><span class="n">ixgrid1</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># reduced regression</span>
</span><span class='line'>    <span class="n">ixgrid2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ix_</span><span class="p">(</span><span class="n">xz</span><span class="p">,</span><span class="n">xz</span><span class="p">)</span>
</span><span class='line'>    <span class="p">[</span><span class="n">AF</span><span class="p">,</span><span class="n">SIGR</span><span class="p">]</span> <span class="o">=</span> <span class="n">autocov_to_var</span><span class="p">(</span><span class="n">G</span><span class="p">[</span><span class="n">ixgrid2</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">ixgrid3</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ix_</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="n">F</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">det</span><span class="p">(</span><span class="n">SIGR</span><span class="p">[</span><span class="n">ixgrid3</span><span class="p">]))</span><span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">det</span><span class="p">(</span><span class="n">SIG</span><span class="p">[</span><span class="n">ixgrid3</span><span class="p">]))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">F</span>
</span></code></pre></td></tr></table></div></figure>


<p>To calculate the coefficients:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">autocov_to_var</span><span class="p">(</span><span class="n">G</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">q1</span><span class="p">]</span> <span class="o">=</span> <span class="n">G</span><span class="o">.</span><span class="n">shape</span><span class="p">;</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">=</span> <span class="n">q1</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">qn</span> <span class="o">=</span> <span class="n">q</span> <span class="o">*</span> <span class="n">n</span>
</span><span class='line'>    <span class="n">G0</span> <span class="o">=</span> <span class="n">G</span><span class="p">[:,:,</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="c"># covariance</span>
</span><span class='line'>    <span class="n">GF</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">G</span><span class="p">[:,:,</span><span class="mi">1</span><span class="p">:],</span> <span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">qn</span><span class="p">))</span><span class="o">.</span><span class="n">T</span>
</span><span class='line'>    <span class="c"># backward autocov sequence</span>
</span><span class='line'>    <span class="n">GB</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">G</span><span class="p">[:,:,</span><span class="mi">1</span><span class="p">:],</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)),</span> <span class="p">(</span><span class="n">qn</span><span class="p">,</span> <span class="n">n</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># forward  coefficients</span>
</span><span class='line'>    <span class="n">AF</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">([</span><span class="n">n</span><span class="p">,</span> <span class="n">qn</span><span class="p">])</span>
</span><span class='line'>    <span class="c"># backward coefficients (reversed compared with Whittle&#39;s treatment)</span>
</span><span class='line'>    <span class="n">AB</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">([</span><span class="n">n</span><span class="p">,</span> <span class="n">qn</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># initialise recursion</span>
</span><span class='line'>    <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span> <span class="c"># model order</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">q</span><span class="o">-</span><span class="n">k</span>
</span><span class='line'>    <span class="n">kf</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">k</span><span class="o">*</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># forward  indices</span>
</span><span class='line'>    <span class="n">kb</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">r</span><span class="o">*</span><span class="n">n</span><span class="p">,</span> <span class="n">qn</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># backward indices</span>
</span><span class='line'>    <span class="n">AF</span><span class="p">[:,</span><span class="n">kf</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">GB</span><span class="p">[</span><span class="n">kb</span><span class="p">,:],</span><span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">inv</span><span class="p">(</span><span class="n">G0</span><span class="p">))</span>
</span><span class='line'>    <span class="n">AB</span><span class="p">[:,</span><span class="n">kb</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">GF</span><span class="p">[</span><span class="n">kf</span><span class="p">,:],</span><span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">inv</span><span class="p">(</span><span class="n">G0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">DF</span> <span class="o">=</span> <span class="n">GB</span><span class="p">[(</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span><span class="n">r</span><span class="o">*</span><span class="n">n</span><span class="p">,:]</span> <span class="o">-</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">AF</span><span class="p">[:,</span><span class="n">kf</span><span class="p">],</span><span class="n">GB</span><span class="p">[</span><span class="n">kb</span><span class="p">,:])</span>
</span><span class='line'>        <span class="n">VB</span> <span class="o">=</span> <span class="n">G0</span> <span class="o">-</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">AB</span><span class="p">[:,</span><span class="n">kb</span><span class="p">],</span><span class="n">GB</span><span class="p">[</span><span class="n">kb</span><span class="p">,:])</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">AAF</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">DF</span><span class="p">,</span><span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">inv</span><span class="p">(</span><span class="n">VB</span><span class="p">));</span> <span class="c"># DF/VB</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">DB</span> <span class="o">=</span> <span class="n">GF</span><span class="p">[(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span><span class="n">k</span><span class="o">*</span><span class="n">n</span><span class="p">,:]</span> <span class="o">-</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">AB</span><span class="p">[:,</span><span class="n">kb</span><span class="p">],</span><span class="n">GF</span><span class="p">[</span><span class="n">kf</span><span class="p">,:])</span>
</span><span class='line'>        <span class="n">VF</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">G0</span><span class="o">-</span><span class="n">AF</span><span class="p">[:,</span><span class="n">kf</span><span class="p">],</span><span class="n">GF</span><span class="p">[</span><span class="n">kf</span><span class="p">,:])</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">AAB</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">DB</span><span class="p">,</span><span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">inv</span><span class="p">(</span><span class="n">VF</span><span class="p">));</span> <span class="c"># DB/VF</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">AFPREV</span> <span class="o">=</span> <span class="n">AF</span><span class="p">[:,</span><span class="n">kf</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="n">ABPREV</span> <span class="o">=</span> <span class="n">AB</span><span class="p">[:,</span><span class="n">kb</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="n">r</span> <span class="o">=</span> <span class="n">q</span><span class="o">-</span><span class="n">k</span>
</span><span class='line'>        <span class="n">kf</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">n</span><span class="p">))</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">kb</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">qn</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">AF</span><span class="p">[:,</span><span class="n">kf</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">AFPREV</span><span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">AAF</span><span class="p">,</span> <span class="n">ABPREV</span><span class="p">),</span> <span class="n">AAF</span><span class="p">)))</span>
</span><span class='line'>        <span class="n">AB</span><span class="p">[:,</span><span class="n">kb</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">AAB</span><span class="p">,</span> <span class="n">ABPREV</span><span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">AAB</span><span class="p">,</span> <span class="n">AFPREV</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">SIG</span> <span class="o">=</span> <span class="n">G0</span><span class="o">-</span><span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">AF</span><span class="p">,</span> <span class="n">GF</span><span class="p">)</span>
</span><span class='line'>    <span class="n">AF</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">AF</span><span class="p">,</span> <span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">q</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">AF</span><span class="p">,</span> <span class="n">SIG</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a preliminary version of the MVGC, we now need to test and validate in real data over the workflows and see if we can get some interesting results. Also, we have agreed that it would be useful to code the Pairwise Conditional Granger Causality (which was maybe the first step to make, before MVGC).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analyzing Correlations, Entropies and Causalities on Brain Data]]></title>
    <link href="http://erramuzpe.github.io/C-PAC/blog/2015/06/03/advances-of-the-last-week/"/>
    <updated>2015-06-03T16:41:23+02:00</updated>
    <id>http://erramuzpe.github.io/C-PAC/blog/2015/06/03/advances-of-the-last-week</id>
    <content type="html"><![CDATA[<p>Last week we dealt with some aspects on how to construct the workflows:</p>

<ul>
<li>Develop fully functional ones where to integrate functions. ✓ [Currently, to make transformations with  the data generated during the workflow, you have to specifically save it]</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'>   <span class="n">np</span><span class="o">.</span><span class="n">savetxt</span><span class="p">(</span><span class="n">in_file</span><span class="o">+</span><span class="s">&#39;_corr.txt&#39;</span><span class="p">,</span> <span class="n">corr_mat</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Test and validate in a pilot real data over the workflows and see if we can get some interesting results. ✓ [it has been done using different type of data (filtered, non-filtered&hellip;), different measures (corr, pcorr and MI) and, in the case of MI, different bin(states) numbers (see 2nd part of the post)]</li>
<li>Implement further synchronization analysis measures.  ✓ [partialcorr workflow was studied and added  to the package and Entropy Correlation Coefficient was implemented as in <a href="http://www.futuremedicine.com/doi/abs/10.2217/14622416.7.3.407">[1]</a>. Also, it was studied the lossless dimensional discretization by the use of better optimal discretization, sampled  entropies and recurrence statistics.</li>
</ul>


<h2><strong>Testing workflows with real data</strong></h2>

<p>I&rsquo;ve tested the Correlation (corr), Partial Correlation (pcorr) and Mutual Information (MI) with 3 different bin_number: 20, 50 and 100, as a pilot approach, were as proper optimization and framework is being fully developed aside. Workflow was tested throughs a dataset of 29 subjects (196 timepoints*voxel) and a 90 ROI parcellation mask (another mask with more parcellations was used, see below). The data was preprocessed and filtered (no global signal was regressed), and rest of criteria were the standards as in <a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC4162310/">[2]</a>. I&rsquo;ve printed some graphs to comment on results:</p>

<p>a) Randomly selected one matrix (one subject) of each one of the measures: corr, pcorr and MI20 (MI50 and MI100 were too sparse, see below). Corr and MI captured some structures (most of them in common) and pcorr was not able to. We are going to try to figure out what happened with pcorr and if this is a suitable result for this measure.
In the other hand, results were quite robust between subjects, unveiling similar relations between ROIs. See below the mean matrix over subjects.</p>

<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/rand_all.png" width="800" height="300" title="image" alt="image"></p>

<p>b) Connectivity as unweighted was found by thresholding correlations with 0.7.</p>

<p><img class="right" src="http://erramuzpe.github.io/C-PAC/images/slopes.png" width="800" height="200" title="image" alt="image"></p>

<p>c) Descriptively, mean values over subjects for MI20, MI50 and MI100. The principal diagonal was set to 0 for visualization purposes, as these values represent the Entropy and are higher that the rest. As can be seen, the reported structures change with the amount of bins chosen.  Having a very blurry effect in MI100 and structures better defined in MI20 (more small MI values, but structures better captured). This is mainly because having 100 states for a signal with 196 timepoints, reduces the possibility of repeating a state, thus, the maximum value of the MI increases (approximating the  maximum possible Entropy) as the number of bins increases.</p>

<p><img class="right" src="http://erramuzpe.github.io/C-PAC/images/MI_bins.png" width="800" height="200" title="image" alt="image"></p>

<p>If we superpose again the sorted frequencies in the matrices, using those 3 prospective thresholds, we obtain a similar pattern of also acceptable information lossless discretization. However, the choice of threshold was something more arbitrary that we had not been able to discuss.</p>

<p><img class="right" src="http://erramuzpe.github.io/C-PAC/images/freq_MI.png" width="800" height="200" title="image" alt="image"></p>

<h2><strong>Theory and discussion</strong></h2>

<p>We also progressed in discussion, I&rsquo;ve a clearer vision of how to implement Multivariate Conditional Granger Causality, based on the one in <a href="http://www.sciencedirect.com/science/article/pii/S0165027013003701">[3]</a> , implementing &ldquo;conditional&rdquo; Granger Causality in multivariate manner <a href="http://www.sciencedirect.com/science/article/pii/S0165027008002379">[4]</a>. For this purpose, we will program an algorithm that uses the autocovariance sequence and discover whether one of these sequences is reducing the uncertainty of the second (with the mean prediction error), having into account the rest of the series. The order of the model will be likely to be 1, since the TR has a low frequency and the dynamics between the source and the target for order higher would be too separated from each other.
The implementation is still in research phase, but I&rsquo;ve done some experiments with randomly generated series:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="n">Y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">Z</span> <span class="o">=</span> <span class="n">Y</span><span class="o">.</span><span class="n">copy</span><span class="p">();</span>
</span><span class='line'><span class="n">Z</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="o">=</span> <span class="n">Z</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="o">+</span> <span class="n">X</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c">#so: X influences Z with timelag 1 (order)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then, as explained <a href="http://www.nld.ds.mpg.de/~timeseries/presentations/granger.py">here</a>.</p>

<p>With this, we are heading towards a transition from the first to the second box of measures that we were thinking of (the first one more related to preprocessing like filtering, synchronization, basic entropies&hellip; and the second one as an analysis module, where we are adding Conditional Granger Causality, Mutual Information, Entropy Correlation Coefficient and many more to come). Anyway, we are not closing the door of the first box, since we have in mind to implement surrogate analysis as in <a href="http://www.sciencedirect.com/science/article/pii/S0167278900000439">[5]</a> to unveil non-linear phenomena occurring.</p>

<p>Moreover, we were thinking in implementing some kind of preprocessing scripts for frequency-filtering and computing the z-score of the series. Actually, an easy band_pass filter was added to <a href="https://github.com/erramuzpe/C-PAC/blob/series_mod/CPAC/series_mod/utils.py#L409-L427">the repo</a> . But then we realised that CPAC already has this functionality implemented, it works fine and there is no point in duplicating it. We will save the bp filter in case we want to use it later on, as we have seen that could be interesting to save some specific bandwidth for some analyses <a href="http://www.sciencedirect.com/science/article/pii/S1053811910011602">[6]</a>. We will further discuss these options, as we are heading towards frequency and coherence analysis as we see that it will bring us interesting possibilities.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Workflows Working: Correlation and Mutual Information]]></title>
    <link href="http://erramuzpe.github.io/C-PAC/blog/2015/05/28/workflows-working-correlation-and-mutual-information/"/>
    <updated>2015-05-28T11:32:58+02:00</updated>
    <id>http://erramuzpe.github.io/C-PAC/blog/2015/05/28/workflows-working-correlation-and-mutual-information</id>
    <content type="html"><![CDATA[<p>First of all, I want to anounce that I have enabled comments in the blog, so readers can comment on the entries. Let&rsquo;s see if this new feature enriches the blog.</p>

<p>After having some troubles to get them working, we have the first two nipype workflows running. Both are pairwise calculations made over a series of signals selected by the user with a mask:</p>

<ul>
<li>Pairwise Correlation over timeseries given a mask.</li>
<li>Pairwise Mutual Information over timeseries given a mask.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">compute_ROI_corr</span><span class="p">(</span><span class="n">in_file</span><span class="p">,</span> <span class="n">mask_file</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">CPAC.series_mod</span> <span class="kn">import</span> <span class="n">gen_roi_timeseries</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">CPAC.series_mod</span> <span class="kn">import</span> <span class="n">corr</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ROI_data</span> <span class="o">=</span> <span class="n">gen_roi_timeseries</span><span class="p">(</span><span class="n">in_file</span><span class="p">,</span> <span class="n">mask_file</span><span class="p">)</span>
</span><span class='line'>    <span class="n">corr_mat</span> <span class="o">=</span> <span class="n">corr</span><span class="p">(</span><span class="n">ROI_data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">corr_mat</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">compute_MI</span><span class="p">(</span><span class="n">in_file</span><span class="p">,</span> <span class="n">mask_file</span><span class="p">,</span> <span class="n">bins</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">CPAC.series_mod</span> <span class="kn">import</span> <span class="n">gen_roi_timeseries</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">CPAC.series_mod</span> <span class="kn">import</span> <span class="n">transform</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">CPAC.series_mod</span> <span class="kn">import</span> <span class="n">mutual_information</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ROI_data</span> <span class="o">=</span> <span class="n">gen_roi_timeseries</span><span class="p">(</span><span class="n">in_file</span><span class="p">,</span> <span class="n">mask_file</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ROI_data</span> <span class="o">=</span> <span class="n">transform</span><span class="p">(</span><span class="n">ROI_data</span><span class="p">,</span><span class="n">bins</span><span class="p">)</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">n_var</span> <span class="o">=</span> <span class="n">ROI_data</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MI_mat</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">n_var</span><span class="p">,</span><span class="n">n_var</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_var</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_var</span><span class="p">):</span>
</span><span class='line'>            <span class="n">MI_mat</span><span class="p">[</span><span class="n">i_</span><span class="p">,</span><span class="n">j_</span><span class="p">]</span> <span class="o">=</span> <span class="n">mutual_information</span><span class="p">(</span><span class="n">ROI_data</span><span class="p">[</span><span class="n">i_</span><span class="p">,:],</span><span class="n">ROI_data</span><span class="p">[</span><span class="n">j_</span><span class="p">,:])</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">MI_mat</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="right" src="http://erramuzpe.github.io/C-PAC/images/CORRgraph.png" width="200" height="200" title="image" alt="image">
<img class="right" src="http://erramuzpe.github.io/C-PAC/images/MIgraph.png" width="200" height="200" title="image" alt="image"></p>

<p>In both of them a fMRI file and a mask are needed, and for the MI calculation a variable &ldquo;bins&rdquo; is also needed. This variable is the number of states that the user wants the signals to be discretized to.</p>

<p>This brings up a new problem; <strong>how many states should we choose to discretize?</strong> We are working on this question and discussing whether we should introduce a measure that optimizes the number of bins/states to choose, between other fitting entropy or correlation formalisms. Seems like we could implement some tests to choose a proper &ldquo;number of states&rdquo;, we will have a further debate.</p>

<p>The discretization is done with the following helper function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">transform</span><span class="p">(</span><span class="n">x_old</span><span class="p">,</span> <span class="n">Nbins</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">    TRANSFORM This funcion computes transforms in a matrix</span>
</span><span class='line'><span class="sd">    to obtain a matrix scaled between the especified number of bins</span>
</span><span class='line'><span class="sd">    INPUT:</span>
</span><span class='line'><span class="sd">      x_old: nobservations * nvariables matrix</span>
</span><span class='line'><span class="sd">      Nbins: Number of bins of the transformed matrix (NBins=2 values betwen</span>
</span><span class='line'><span class="sd">     -1, NBins=3 values between 0-2...)</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    OUTPUT:  </span>
</span><span class='line'><span class="sd">    x_new: New scaled matrix</span>
</span><span class='line'><span class="sd">    &#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">npoints</span><span class="p">,</span> <span class="n">num_vals</span><span class="p">]</span> <span class="o">=</span> <span class="n">x_old</span><span class="o">.</span><span class="n">shape</span>
</span><span class='line'>    <span class="n">xmax</span> <span class="o">=</span> <span class="n">Nbins</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="n">xmin</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">ymax</span> <span class="o">=</span> <span class="n">x_old</span><span class="o">.</span><span class="n">max</span><span class="p">()</span>
</span><span class='line'>    <span class="n">ymin</span> <span class="o">=</span> <span class="n">x_old</span><span class="o">.</span><span class="n">min</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#x_new = ((xmax - xmin)/(ymax - ymin) )* x_old - ( (xmax - xmin) / (ymax - ymin) ) * ymin + xmin;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">xmax</span><span class="o">-</span><span class="n">xmin</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">ymax</span><span class="o">-</span><span class="n">ymin</span><span class="p">)</span>
</span><span class='line'>    <span class="n">x_new</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x_old</span>
</span><span class='line'>    <span class="n">x_new</span> <span class="o">=</span> <span class="n">x_new</span> <span class="o">-</span> <span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">ymin</span><span class="o">+</span><span class="n">xmin</span><span class="p">)</span>
</span><span class='line'>    <span class="n">x_new</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="n">x_new</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">x_new</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, when testing the workflows, we encountered another problem. While running the scripts by our own with the code alone, we had the results as we were expecting; but, when building and running the workflows, we can not get the results. We need to investigate on this, since is the basis of many things.</p>

<p>To do:</p>

<ul>
<li>Solve the problems with workflows.</li>
<li>Try real data over the workflows and see if we can get some interesting results.</li>
<li>Implement further synchronization analysis measures.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding Has Begun!]]></title>
    <link href="http://erramuzpe.github.io/C-PAC/blog/2015/05/26/coding-has-begun/"/>
    <updated>2015-05-26T17:31:20+02:00</updated>
    <id>http://erramuzpe.github.io/C-PAC/blog/2015/05/26/coding-has-begun</id>
    <content type="html"><![CDATA[<p>Yesterday was the first day of coding of the program, I hope this summer to be a great learning period!</p>

<p>We are now working in a first package of measures that allow us to do a preanalysis of the data and detect non-linear components. We are into measures like Autocorrelation, Entropies (lagged), frequency filtering and many more.</p>

<p>Some problems with memory handling just arose, computing the voxel-wise correlation. We will discuss further how to solve this problem, but we found some solutions <a href="http://stackoverflow.com/questions/13044880/memory-efficient-storage-of-many-large-scipy-sparse-matrices">[1]</a> <a href="http://stackoverflow.com/questions/11002247/how-to-reduce-python-script-memory-usage">[2]</a> to start doing some research about this.</p>

<p>I have added a new <a href="https://gist.github.com/fabianp/9396204419c7b638d38f">partial correlation</a> function developed by Fabian Pedregosa (the author of <a href="http://scikit-learn.org/stable/">Scikit-learn</a>), quite more demanding computationally than the simple correlation.</p>

<p>I have improved the readability of the code and removed totally the calls to nitime  by using numpy.corrcoef to calculate the correlation over series. Also, I have cleaned the code and the user can choose between doing voxel-wise analysis or ROI-timeseries analysis with two new functions (probably I should name them differently, since CPACs already has functions named like that).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">gen_voxel_timeseries</span><span class="p">(</span><span class="n">in_file</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Extracts voxelwise timeseries and return a np array with them.   </span>
</span><span class='line'><span class="sd">    Parameters</span>
</span><span class='line'><span class="sd">    ----------</span>
</span><span class='line'><span class="sd">    in_file : nifti file</span>
</span><span class='line'><span class="sd">        4D EPI File </span>
</span><span class='line'><span class="sd">    Returns</span>
</span><span class='line'><span class="sd">    -------</span>
</span><span class='line'><span class="sd">    data_array =  voxel(x,y,z) * timepoints</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">nibabel</span> <span class="kn">as</span> <span class="nn">nb</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">img_data</span> <span class="o">=</span> <span class="n">nb</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">in_file</span><span class="p">)</span><span class="o">.</span><span class="n">get_data</span><span class="p">()</span>
</span><span class='line'>    <span class="n">n_samples</span> <span class="o">=</span> <span class="n">img_data</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'>    <span class="c">#print img_data.shape</span>
</span><span class='line'>    <span class="p">(</span><span class="n">n_x</span><span class="p">,</span> <span class="n">n_y</span><span class="p">,</span> <span class="n">n_z</span><span class="p">,</span> <span class="n">n_t</span><span class="p">)</span> <span class="o">=</span> <span class="n">img_data</span><span class="o">.</span><span class="n">shape</span>
</span><span class='line'>    <span class="n">voxel_data_array</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">img_data</span><span class="p">,</span> <span class="p">(</span><span class="n">n_x</span><span class="o">*</span><span class="n">n_y</span><span class="o">*</span><span class="n">n_z</span><span class="p">,</span> <span class="n">n_t</span><span class="p">),</span> <span class="n">order</span><span class="o">=</span><span class="s">&#39;F&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span>  <span class="n">voxel_data_array</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">gen_roi_timeseries</span><span class="p">(</span><span class="n">in_file</span><span class="p">,</span> <span class="n">mask_file</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Extracts ROI timeseries and return a np array with them.    </span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Parameters</span>
</span><span class='line'><span class="sd">    ----------</span>
</span><span class='line'><span class="sd">    in_file : nifti file</span>
</span><span class='line'><span class="sd">        4D EPI File       </span>
</span><span class='line'><span class="sd">    mask_file : nifti file</span>
</span><span class='line'><span class="sd">        Mask of the EPI File(Only Compute Correlation of voxels in the mask)</span>
</span><span class='line'><span class="sd">        Must be 3D    </span>
</span><span class='line'><span class="sd">    Returns</span>
</span><span class='line'><span class="sd">    -------</span>
</span><span class='line'><span class="sd">    data_array = ROI_number * timepoints</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">nibabel</span> <span class="kn">as</span> <span class="nn">nb</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">img_data</span> <span class="o">=</span> <span class="n">nb</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">in_file</span><span class="p">)</span><span class="o">.</span><span class="n">get_data</span><span class="p">()</span>
</span><span class='line'>    <span class="n">n_samples</span> <span class="o">=</span> <span class="n">img_data</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mask_data</span> <span class="o">=</span> <span class="n">nb</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">mask_file</span><span class="p">)</span><span class="o">.</span><span class="n">get_data</span><span class="p">()</span>
</span><span class='line'>    <span class="c"># Cast as rounded-up integer</span>
</span><span class='line'>    <span class="n">mask_data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">int64</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">ceil</span><span class="p">(</span><span class="n">mask_data</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">mask_data</span><span class="o">.</span><span class="n">shape</span> <span class="o">!=</span> <span class="n">img_data</span><span class="o">.</span><span class="n">shape</span><span class="p">[:</span><span class="mi">3</span><span class="p">]:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;Invalid Shape Error.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">nodes</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="n">mask_data</span><span class="p">)</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
</span><span class='line'>    <span class="n">nodes</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c">#quits the ROI number &#39;0&#39;</span>
</span><span class='line'>    <span class="n">roi_data_array</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">nodes</span><span class="p">),</span><span class="n">n_samples</span><span class="p">))</span>
</span><span class='line'>    <span class="n">nodes</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">nodes</span><span class="p">:</span>
</span><span class='line'>        <span class="n">node_array</span> <span class="o">=</span> <span class="n">img_data</span><span class="p">[</span><span class="n">mask_data</span> <span class="o">==</span> <span class="n">n</span><span class="p">]</span>
</span><span class='line'>        <span class="n">avg</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">node_array</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">roi_data_array</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="n">avg</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span>  <span class="n">roi_data_array</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have in mind the problem of how to save the data structure (&ldquo;timeseries * timepoints&rdquo; or &ldquo;timepoints * timeseries&rdquo;). I should ask this in the IRC, an agreement is necessary for building the functions that are going to use this data.</p>

<p>I will finish this week with the Autocorrelation and Partial-Correlation implementation and testing. Coding these along with Transfer Entropy seem a good first week objective while putting into perspective of coding the points raised during discussion, such as:</p>

<ul>
<li><p>Type and properties of correlations and entropies to calculate (and how these describe the dimensionality of the data and complex patterns).</p></li>
<li><p>Relation with frequency decomposition and pattern formation, we should extend discussion to Wavelets/Hurst spectrum.</p></li>
<li><p>Identify useful elements for the fingerprint method (frequency bands).</p></li>
</ul>


<p>To do:</p>

<ul>
<li><p>First objective: work on models of correlation, entropies and discretisation, as well as their statistical properties (Also as recurrence, etc.)</p></li>
<li><p>Discuss further the papers from points Cameron made. ECC seems to be a good measure to incorporate to the package.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes From the Bonding Period and Discussion: Initial Plan of Implementation]]></title>
    <link href="http://erramuzpe.github.io/C-PAC/blog/2015/05/22/bonding-period-discussion-measures-to-work-with/"/>
    <updated>2015-05-22T10:15:01+02:00</updated>
    <id>http://erramuzpe.github.io/C-PAC/blog/2015/05/22/bonding-period-discussion-measures-to-work-with</id>
    <content type="html"><![CDATA[<p><strong>1 - Theoretical discussion:</strong></p>

<p>During the Bonding Period, we have been discussiing some measures more thoroughly, thinking in the possible benefits that C-PAC could obtain of implementing and integrating them into a general toolkit around the ideas of . As a test period we have been working on some approaches and analysis tools.</p>

<p><strong>2 - Collection of measures:</strong></p>

<p>Determination of non-linear components, transient and singularities:</p>

<ul>
<li><p>Autocorrelation: Is the same approach as Granger Causality, but looking to lagged correlation values instead of coefficients. It gives a fast and reliable information about the series, being analyzed with itself.</p></li>
<li><p>Entropies and information probabilistic content, partial correlations and sampling formalism (binarizing&hellip;)</p></li>
<li><p>Cross correlation: Pairwise analysis of series looking for a direct correlation between them. The results obtained could be useful to analyze with graph-based methods.</p></li>
</ul>


<p>Granger Causality  is the term used to measure the ability of predicting the future values of a time series using past values of another time series. Unlike in Information Theory measures, it can be applied to the timeseries directly. We have in mind of developing two methods:</p>

<ul>
<li><p>Granger Causality Test: This test is a statistical hypothesis test for determining whether one time series is useful in forecasting another, using GC terms.</p></li>
<li><p>Pairwise GC: This measure excludes the effect of other series in the GC calculation in the multivariate approach. It has a high computational demand.</p></li>
</ul>


<p>Some measures to be effective finding connectivity patterns that could be implemented:</p>

<ul>
<li><p>Avalanches: The importance of this measure relies on the observation that large-scale brain dynamics can be traced as discrete scale-free avalanches. The algorithm has some sub-phases that can be useful too:</p>

<ul>
<li>Point process analysis: Is the first step to avalanche calculation and also could be a good dimensionality reductor for other problems.</li>
<li>Clustering and avalanche detection: There are already some clustering algorithms in CPAC that could be reused for this purpose.</li>
</ul>
</li>
<li><p>Multi-fractal analysis, time scaling formalisms&hellip;:  Fractal processes, like trees or coastlines, are defined by self-similarity or power law scaling controlled by a single exponent, simply related to the box-counting dimension or Hurst exponent of the process. Multifractal processes, like turbulence, have more complex behaviours defined by a spectrum of possible local scaling behaviours or singularity exponents.</p></li>
<li><p>Fingerprints:  A fingerprinting algorithm is a procedure that maps an arbitrarily large data item to a much shorter bit string. We are looking for fMRI suitable fingerprints such IC-fingerprints based on frequency analysis or structural-fingerprints.</p></li>
</ul>


<p><strong>3 - Disscussion on implementation:</strong></p>

<p>These measures will be furtherly discussed and how are they implemented will depend largely in the emerging ideas. Anyway, we have an improved timing (plan) for the project which we are translating into the workflow. In term of metrics: We will work each month in some of the blocks mentioned, having the fourth week reserved for testing over large datasets and code refining (efficiency improvements).</p>

<p><img class="center" src="http://erramuzpe.github.io/C-PAC/images/calendar.png" width="700" height="700" title="image" alt="image"></p>

<p>Moreover, our intention is to keep developing methods for C-PAC after the project period expires, since we are noticing that this can be a good opportunity of both learning and developing new methods.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Information Theory Based Measures and Some Advances]]></title>
    <link href="http://erramuzpe.github.io/C-PAC/blog/2015/05/21/information-theory-based-measures-and-some-advances/"/>
    <updated>2015-05-21T17:55:05+02:00</updated>
    <id>http://erramuzpe.github.io/C-PAC/blog/2015/05/21/information-theory-based-measures-and-some-advances</id>
    <content type="html"><![CDATA[<p>During the bonding period, very interesting discussions came across related to the measures we could develop during the project. As an initial exercise, I thought it could be interesting to test some basic <a href="https://en.wikipedia.org/wiki/Information_theory">Information Theory</a> based measures. Basically, I wanted to reproduce the calculation of <a href="https://en.wikipedia.org/wiki/Entropy_%28information_theory%29">Entropy</a> and the related measures shown in this image:</p>

<p><img class="left" src="http://erramuzpe.github.io/C-PAC/images/entropy.png" width="350" height="350" title="image" alt="image"></p>

<p>The calculation of the Entropy is quite straightforward, so I decided to test different implementations of some people and test them with the <a href="https://docs.python.org/2/library/timeit.html">timeit</a> module.</p>

<p>It turned that among 4-5 different functions I found <a href="http://blog.biolab.si/2012/06/15/computing-joint-entropy-in-python/">this one</a> coded using numpy and allowing also the calculation of the  <a href="https://en.wikipedia.org/wiki/Joint_entropy">Joint Entropy</a> using itertools was the fastest by far.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">entropy</span><span class="p">(</span><span class="o">*</span><span class="n">X</span><span class="p">):</span>
</span><span class='line'>    <span class="n">n_insctances</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">X</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>    <span class="n">H</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">classes</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">product</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="nb">set</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">X</span><span class="p">]):</span>
</span><span class='line'>        <span class="n">v</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="bp">True</span><span class="p">]</span> <span class="o">*</span> <span class="n">n_insctances</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">predictions</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">classes</span><span class="p">):</span>
</span><span class='line'>            <span class="n">v</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">logical_and</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">predictions</span> <span class="o">==</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>        <span class="n">p</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>        <span class="n">H</span> <span class="o">+=</span> <span class="o">-</span><span class="n">p</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">log2</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="k">if</span> <span class="n">p</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">H</span>
</span></code></pre></td></tr></table></div></figure>


<p>Having the basic blocks, I built the Conditional Entropy and Mutual Information easily:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">mutual_information</span><span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="n">Y</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Hx</span> <span class="o">=</span> <span class="n">entropy</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</span><span class='line'>    <span class="n">Hy</span> <span class="o">=</span> <span class="n">entropy</span><span class="p">(</span><span class="n">Y</span><span class="p">)</span>
</span><span class='line'>    <span class="n">Hxy</span> <span class="o">=</span> <span class="n">entropy</span><span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="n">Y</span><span class="p">)</span>
</span><span class='line'>    <span class="n">MI</span> <span class="o">=</span> <span class="n">Hx</span> <span class="o">+</span> <span class="n">Hy</span> <span class="o">-</span> <span class="n">Hxy</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">MI</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">cond_entropy</span><span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="n">Y</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Hy</span> <span class="o">=</span> <span class="n">entropy</span><span class="p">(</span><span class="n">Y</span><span class="p">)</span>
</span><span class='line'>    <span class="n">Hyx</span> <span class="o">=</span> <span class="n">entropy</span><span class="p">(</span><span class="n">Y</span><span class="p">,</span><span class="n">X</span><span class="p">)</span>
</span><span class='line'>    <span class="n">CE</span> <span class="o">=</span> <span class="n">Hyx</span> <span class="o">-</span> <span class="n">Hy</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">CE</span>
</span></code></pre></td></tr></table></div></figure>


<p>I proved the functions over small vectors and all the properties seemed to work well. In the other hand, I sorted out the loading of the fMRI files (that I was loading with an external function) and the calculation of the TR using just the NIFTI header using  <a href="http://nipy.org/nibabel/">nibabel</a>.</p>

<p>The first time trying to calculate the Entropy voxel-wise (it took like 5 mins and used only 1 core, so this must be solved in <a href="https://github.com/FCP-INDI/C-PAC/blob/master/CPAC/pipeline/cpac_pipeline.py#L5880">some way</a> or <a href="https://docs.python.org/2/library/multiprocessing.html">another</a>) and over 90 timeseries extracted from a ROI-mask, I failed. As these measures are calculated over probability density functions, the data must be converted into &lsquo;states&rsquo;, binarized for example. This is another problem I have to solve: Dealing with fMRI datatypes and FSL functions. I still don&rsquo;t know how to make use directly of FSL utils (and neither about the different FSL options I have. This is a TO DO for my list).</p>

<p>To solve the problem, I&rsquo;ve created my own timeseries extractor (generates a Numpy array, not a CSV file as in <em>gen_roi_timeseries</em>.<em>py</em>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'>    <span class="n">unit_data</span> <span class="o">=</span> <span class="n">nb</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">mask_file</span><span class="p">)</span><span class="o">.</span><span class="n">get_data</span><span class="p">()</span>
</span><span class='line'>    <span class="n">datafile</span> <span class="o">=</span> <span class="n">nb</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">in_file</span><span class="p">)</span>
</span><span class='line'>    <span class="n">img_data</span> <span class="o">=</span> <span class="n">datafile</span><span class="o">.</span><span class="n">get_data</span><span class="p">()</span>
</span><span class='line'>    <span class="n">n_samples</span> <span class="o">=</span> <span class="n">img_data</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">unit_data</span><span class="o">.</span><span class="n">shape</span> <span class="o">!=</span> <span class="n">img_data</span><span class="o">.</span><span class="n">shape</span><span class="p">[:</span><span class="mi">3</span><span class="p">]:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;FAIL&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">nodes</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="n">unit_data</span><span class="p">)</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
</span><span class='line'>    <span class="n">roi_data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">nodes</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">n_samples</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Be carefull with number of ROIs and np-arrays</span>
</span><span class='line'>    <span class="n">nodes</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">nodes</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="n">node_array</span> <span class="o">=</span> <span class="n">img_data</span><span class="p">[</span><span class="n">unit_data</span> <span class="o">==</span> <span class="n">n</span><span class="p">]</span>
</span><span class='line'>            <span class="n">avg</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">node_array</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="n">roi_data</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="n">avg</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This structure can be used to extract all voxels timeseries as well. As work for the next week, this data has to be binarized to two (or more) &lsquo;states&rsquo; and then passed to the IT functions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Scripts for C-PAC: This Is Just the Beginning]]></title>
    <link href="http://erramuzpe.github.io/C-PAC/blog/2015/05/08/first-scripts-for-c-pac-this-is-just-the-beginning/"/>
    <updated>2015-05-08T15:40:53+02:00</updated>
    <id>http://erramuzpe.github.io/C-PAC/blog/2015/05/08/first-scripts-for-c-pac-this-is-just-the-beginning</id>
    <content type="html"><![CDATA[<p>In this blog I will write about my experience with C-PAC development. Our intention here is to develop a series of scripts that allow us (C-PAC users) to calculate some measures over non-linear fMRI timeseries and integrate them in a workflow. Our aim is to extend and improve C-PAC&rsquo;s features.</p>

<p>In this first post I will try to explain some of what I have done for my first two scripts for C-PAC as my first contact with C-PAC. I would like to learn a lot about C-PAC&rsquo;s structure, workflows etc. and give back too. The goal of this first scripts is to say &lsquo;hi&rsquo;, have some feedback from main developers and take a first hands-on with the code.</p>

<p>In order to learn from <a href="https://github.com/FCP-INDI/C-PAC">C-PAC&rsquo;s repo</a> on <a href="https://github.com">on GitHub</a> and to C-PAC&rsquo;s forums and I saw a <a href="https://groups.google.com/forum/#!topic/cpax_forum/GMnwQD7B8l8">question</a> on cross correlations and though it could be a good exercise to try possibilities (out of using other available utils like FSLcc) and afterwards, I also made the calculation for Transfer Entropy (TE) Granger Causality (GC)). As a short description, these 2 scripts calculate correlations and GC between ROI-time series extracted from an fMRI file (this is done using a ROI-mask with the <em>gen_roi_timeserier.py</em> function which is already in C-PAC).</p>

<p>My code is in the copy I <a href="https://github.com/erramuzpe/C-PAC">forked</a>, in a new branch called <a href="https://github.com/erramuzpe/C-PAC/tree/series_mod">series_mod</a>. I saved my scripts in a folder of the same name.</p>

<p>We have got here 3 files, <em><em>init</em> _ </em>.py<em>, </em>series_mod.py<em> and </em>utils.py_ .
I used these three files from a template of other toolbox in C-PAC. <a href="https://github.com/erramuzpe/C-PAC/blob/series_mod/CPAC/series_mod/series_mod.py"><em>series_mod.py</em></a> generates the workflows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">create_corr</span><span class="p">():</span>
</span><span class='line'>    <span class="n">corr</span> <span class="o">=</span> <span class="n">pe</span><span class="o">.</span><span class="n">Workflow</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;corr&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">inputNode</span> <span class="o">=</span> <span class="n">pe</span><span class="o">.</span><span class="n">Node</span><span class="p">(</span><span class="n">util</span><span class="o">.</span><span class="n">IdentityInterface</span><span class="p">(</span><span class="n">fields</span><span class="o">=</span><span class="p">[</span>
</span><span class='line'>                                                <span class="s">&#39;in_file&#39;</span><span class="p">,</span>
</span><span class='line'>                                                <span class="s">&#39;mask&#39;</span><span class="p">,</span>
</span><span class='line'>                                                <span class="s">&#39;TR&#39;</span>
</span><span class='line'>                                                <span class="p">]),</span>
</span><span class='line'>                        <span class="n">name</span><span class="o">=</span><span class="s">&#39;inputspec&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">outputNode</span> <span class="o">=</span> <span class="n">pe</span><span class="o">.</span><span class="n">Node</span><span class="p">(</span><span class="n">util</span><span class="o">.</span><span class="n">IdentityInterface</span><span class="p">(</span><span class="n">fields</span><span class="o">=</span><span class="p">[</span>
</span><span class='line'>                                                    <span class="s">&#39;corr_mat&#39;</span><span class="p">]),</span>
</span><span class='line'>                        <span class="n">name</span><span class="o">=</span><span class="s">&#39;outputspec&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">corr_mat</span> <span class="o">=</span> <span class="n">pe</span><span class="o">.</span><span class="n">Node</span><span class="p">(</span><span class="n">util</span><span class="o">.</span><span class="n">Function</span><span class="p">(</span><span class="n">input_names</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;in_file&#39;</span><span class="p">,</span> <span class="s">&#39;mask&#39;</span><span class="p">,</span><span class="s">&#39;TR&#39;</span><span class="p">],</span>
</span><span class='line'>                                   <span class="n">output_names</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;out_file&#39;</span><span class="p">],</span>
</span><span class='line'>                     <span class="n">function</span><span class="o">=</span><span class="n">compute_corr</span><span class="p">),</span>
</span><span class='line'>                     <span class="n">name</span><span class="o">=</span><span class="s">&#39;corr_mat&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">corr</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">inputNode</span><span class="p">,</span> <span class="s">&#39;in_file&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">corr_mat</span><span class="p">,</span> <span class="s">&#39;in_file&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">corr</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">inputNode</span><span class="p">,</span> <span class="s">&#39;mask&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">corr_mat</span><span class="p">,</span> <span class="s">&#39;mask&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">corr</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">inputNode</span><span class="p">,</span> <span class="s">&#39;TR&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">corr_mat</span><span class="p">,</span> <span class="s">&#39;TR&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">corr</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">corr_mat</span><span class="p">,</span> <span class="s">&#39;out_file&#39;</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">outputNode</span><span class="p">,</span> <span class="s">&#39;corr_mat&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">corr</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are 3 input parameters; fMRI series, the ROI-mask and TR of the fMRI. This function makes use of the functions in <a href="https://github.com/erramuzpe/C-PAC/blob/series_mod/CPAC/series_mod/utils.py"><em>utils.py</em></a>. Let&rsquo;s see part of the code (present in my repo):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">compute_corr</span><span class="p">(</span><span class="n">in_file</span><span class="p">,</span> <span class="n">mask_file</span><span class="p">,</span> <span class="n">TR</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Computes the Network Correlation Matrix for ROIs in the mask</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">matplotlib.mlab</span> <span class="kn">import</span> <span class="n">csv2rec</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">cpac.timeseries</span> <span class="kn">import</span> <span class="n">gen_roi_timeseries</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#Import the time-series objects:</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">nitime.timeseries</span> <span class="kn">import</span> <span class="n">TimeSeries</span>
</span><span class='line'>    <span class="c">#Import the analysis objects:</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">nitime.analysis</span> <span class="kn">import</span> <span class="n">CorrelationAnalyzer</span>
</span><span class='line'>    <span class="c">#Import utility functions:</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">nitime.utils</span> <span class="kn">import</span> <span class="n">percent_change</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">output_type</span> <span class="o">=</span> <span class="p">[</span><span class="bp">True</span><span class="p">,</span><span class="bp">False</span><span class="p">]</span> <span class="c">#list of boolean for csv and npz file formats</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">gen_roi_timeseries</span><span class="p">(</span><span class="n">in_file</span><span class="p">,</span> <span class="n">mask_file</span><span class="p">,</span> <span class="n">output_type</span><span class="p">)</span>
</span><span class='line'>    <span class="c">#from this files gen_roi_timeseries</span>
</span><span class='line'>    <span class="c">#once we have the time series:</span>
</span><span class='line'>    <span class="n">data_rec</span> <span class="o">=</span> <span class="n">csv2rec</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#Extract information:</span>
</span><span class='line'>    <span class="n">roi_names</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">data_rec</span><span class="o">.</span><span class="n">dtype</span><span class="o">.</span><span class="n">names</span><span class="p">)</span>
</span><span class='line'>    <span class="n">n_samples</span> <span class="o">=</span> <span class="n">data_rec</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#Make an empty container for the data</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="nb">len</span><span class="p">(</span><span class="n">roi_names</span><span class="p">),</span> <span class="n">n_samples</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">n_idx</span><span class="p">,</span> <span class="n">roi</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">roi_names</span><span class="p">):</span>
</span><span class='line'>        <span class="n">data</span><span class="p">[</span><span class="n">n_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">data_rec</span><span class="p">[</span><span class="n">roi</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#Normalize the data:</span>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">percent_change</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">T</span> <span class="o">=</span> <span class="n">TimeSeries</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">sampling_interval</span><span class="o">=</span><span class="n">TR</span><span class="p">)</span>
</span><span class='line'>    <span class="n">T</span><span class="o">.</span><span class="n">metadata</span><span class="p">[</span><span class="s">&#39;roi&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">roi_names</span>
</span><span class='line'>    <span class="c">#Initialize the correlation analyzer</span>
</span><span class='line'>    <span class="n">C</span> <span class="o">=</span> <span class="n">CorrelationAnalyzer</span><span class="p">(</span><span class="n">T</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">## IN CASE WE WOULD LIKE TO ADD A THRESHOLD FEATURE (set inside the function</span>
</span><span class='line'>    <span class="c"># or from input)</span>
</span><span class='line'>    <span class="c"># C.corrcoef[C.corrcoef&lt;0.7] = 0</span>
</span><span class='line'>    <span class="k">return</span>  <span class="n">C</span><span class="o">.</span><span class="n">corrcoef</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is a trivial computation after extracting the time-series. This data could have been treated or filtered, but this first scripts were just to train myself with the repo, python, nypipe workflows etc. .</p>

<p>I started from my own implementations in python, but also took some of this code and ideas from these tutorials:</p>

<p>[1] <a href="http://nipy.org/nitime/examples/resting_state_fmri.html">http://nipy.org/nitime/examples/resting_state_fmri.html</a></p>

<p>[2] <a href="http://nipy.org/nitime/examples/granger_fmri.html">http://nipy.org/nitime/examples/granger_fmri.html</a></p>

<p>The result for the correlation when making calculations on preprocessed data of 3mm voxel-size and a mask of 90 ROIs parcellation is</p>

<p><img class="left" src="http://erramuzpe.github.io/C-PAC/images/result.png" width="350" height="350" title="image" alt="image"></p>

<p>I will discuss about the measures we are going to work on in the next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post - Hello World]]></title>
    <link href="http://erramuzpe.github.io/C-PAC/blog/2015/05/08/Hello-World/"/>
    <updated>2015-05-08T13:44:48+02:00</updated>
    <id>http://erramuzpe.github.io/C-PAC/blog/2015/05/08/Hello-World</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">print</span> <span class="s">&#39;Hello World!&#39;</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;Kaixo Mundua!&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
